
Serial_bus_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003188  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003248  08003248  00004248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003280  08003280  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003280  08003280  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003280  08003280  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00004280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003284  08003284  00004284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003288  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08003294  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003294  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a044  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf5  00000000  00000000  0000f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00010d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fc  00000000  00000000  00011530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f06  00000000  00000000  00011b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad80  00000000  00000000  00023a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068f69  00000000  00000000  0002e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009771b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a94  00000000  00000000  00097760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000991f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003230 	.word	0x08003230

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003230 	.word	0x08003230

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <Sync_write>:
//	packet.Param = param_array;
//	packet.Checksum = getChecksum(packet);
//    AxelFlow_fire(&huart2, packet);
//}

void Sync_write(SyncWrite_Packet write_packet){
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b093      	sub	sp, #76	@ 0x4c
 8000224:	af02      	add	r7, sp, #8
 8000226:	2410      	movs	r4, #16
 8000228:	193c      	adds	r4, r7, r4
 800022a:	6020      	str	r0, [r4, #0]
 800022c:	6061      	str	r1, [r4, #4]
 800022e:	60a2      	str	r2, [r4, #8]
 8000230:	60e3      	str	r3, [r4, #12]
    unsigned char lowByte_s, highByte_s;


	uint8_t param_array[sizeof(write_packet.ID)+sizeof(write_packet.pos)+sizeof(write_packet.speed)+sizeof(write_packet.time)+2];
	int i;
	param_array[0]=0x2A;
 8000232:	2120      	movs	r1, #32
 8000234:	187b      	adds	r3, r7, r1
 8000236:	222a      	movs	r2, #42	@ 0x2a
 8000238:	701a      	strb	r2, [r3, #0]
	param_array[1]=0x06;
 800023a:	187b      	adds	r3, r7, r1
 800023c:	2206      	movs	r2, #6
 800023e:	705a      	strb	r2, [r3, #1]
	int count=2;
 8000240:	2302      	movs	r3, #2
 8000242:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (i=0;i<(sizeof(write_packet.ID));i++){
 8000244:	2300      	movs	r3, #0
 8000246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000248:	e05f      	b.n	800030a <Sync_write+0xea>
		int_to_hex(write_packet.pos[i],&lowByte_p,&highByte_p);
 800024a:	2410      	movs	r4, #16
 800024c:	193b      	adds	r3, r7, r4
 800024e:	685a      	ldr	r2, [r3, #4]
 8000250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000252:	18d3      	adds	r3, r2, r3
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	0018      	movs	r0, r3
 8000258:	2536      	movs	r5, #54	@ 0x36
 800025a:	197a      	adds	r2, r7, r5
 800025c:	2637      	movs	r6, #55	@ 0x37
 800025e:	19bb      	adds	r3, r7, r6
 8000260:	0019      	movs	r1, r3
 8000262:	f000 f8e7 	bl	8000434 <int_to_hex>
		int_to_hex(write_packet.time[i],&lowByte_t,&highByte_t);
 8000266:	193b      	adds	r3, r7, r4
 8000268:	689a      	ldr	r2, [r3, #8]
 800026a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800026c:	18d3      	adds	r3, r2, r3
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	0018      	movs	r0, r3
 8000272:	2334      	movs	r3, #52	@ 0x34
 8000274:	18fa      	adds	r2, r7, r3
 8000276:	2335      	movs	r3, #53	@ 0x35
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0019      	movs	r1, r3
 800027c:	f000 f8da 	bl	8000434 <int_to_hex>
		int_to_hex(write_packet.speed[i],&lowByte_s,&highByte_s);
 8000280:	193b      	adds	r3, r7, r4
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000286:	18d3      	adds	r3, r2, r3
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	0018      	movs	r0, r3
 800028c:	2332      	movs	r3, #50	@ 0x32
 800028e:	18fa      	adds	r2, r7, r3
 8000290:	2133      	movs	r1, #51	@ 0x33
 8000292:	187b      	adds	r3, r7, r1
 8000294:	0019      	movs	r1, r3
 8000296:	f000 f8cd 	bl	8000434 <int_to_hex>
		param_array[count++] = write_packet.ID[i];
 800029a:	193b      	adds	r3, r7, r4
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002a0:	18d2      	adds	r2, r2, r3
 80002a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002a4:	1c59      	adds	r1, r3, #1
 80002a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80002a8:	7811      	ldrb	r1, [r2, #0]
 80002aa:	2020      	movs	r0, #32
 80002ac:	183a      	adds	r2, r7, r0
 80002ae:	54d1      	strb	r1, [r2, r3]
		param_array[count++]= lowByte_p;
 80002b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80002b6:	19ba      	adds	r2, r7, r6
 80002b8:	7811      	ldrb	r1, [r2, #0]
 80002ba:	183a      	adds	r2, r7, r0
 80002bc:	54d1      	strb	r1, [r2, r3]
		param_array[count++]= highByte_p;
 80002be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002c0:	1c5a      	adds	r2, r3, #1
 80002c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80002c4:	197a      	adds	r2, r7, r5
 80002c6:	7811      	ldrb	r1, [r2, #0]
 80002c8:	183a      	adds	r2, r7, r0
 80002ca:	54d1      	strb	r1, [r2, r3]
		param_array[count++]= 0;
 80002cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002ce:	1c5a      	adds	r2, r3, #1
 80002d0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80002d2:	183a      	adds	r2, r7, r0
 80002d4:	2100      	movs	r1, #0
 80002d6:	54d1      	strb	r1, [r2, r3]
		param_array[count++]= 0;
 80002d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002da:	1c5a      	adds	r2, r3, #1
 80002dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80002de:	183a      	adds	r2, r7, r0
 80002e0:	2100      	movs	r1, #0
 80002e2:	54d1      	strb	r1, [r2, r3]
		param_array[count++]= lowByte_s;
 80002e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80002ea:	2133      	movs	r1, #51	@ 0x33
 80002ec:	187a      	adds	r2, r7, r1
 80002ee:	7811      	ldrb	r1, [r2, #0]
 80002f0:	183a      	adds	r2, r7, r0
 80002f2:	54d1      	strb	r1, [r2, r3]
		param_array[count++]= highByte_s;
 80002f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80002fa:	2232      	movs	r2, #50	@ 0x32
 80002fc:	18ba      	adds	r2, r7, r2
 80002fe:	7811      	ldrb	r1, [r2, #0]
 8000300:	183a      	adds	r2, r7, r0
 8000302:	54d1      	strb	r1, [r2, r3]
	for (i=0;i<(sizeof(write_packet.ID));i++){
 8000304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000306:	3301      	adds	r3, #1
 8000308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800030a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800030c:	2b03      	cmp	r3, #3
 800030e:	d99c      	bls.n	800024a <Sync_write+0x2a>
	}

	packet.Header_1 = HEADER;
 8000310:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <Sync_write+0x150>)
 8000312:	22ff      	movs	r2, #255	@ 0xff
 8000314:	701a      	strb	r2, [r3, #0]
	packet.Header_2 = HEADER;
 8000316:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <Sync_write+0x150>)
 8000318:	22ff      	movs	r2, #255	@ 0xff
 800031a:	705a      	strb	r2, [r3, #1]
	packet.Packet_ID = 0xFE;
 800031c:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <Sync_write+0x150>)
 800031e:	22fe      	movs	r2, #254	@ 0xfe
 8000320:	709a      	strb	r2, [r3, #2]
	packet.Length = sizeof(param_array)+2;
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <Sync_write+0x150>)
 8000324:	2214      	movs	r2, #20
 8000326:	70da      	strb	r2, [r3, #3]
	packet.Instruction = COMMAND_SYNC_WRITE;
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <Sync_write+0x150>)
 800032a:	2283      	movs	r2, #131	@ 0x83
 800032c:	711a      	strb	r2, [r3, #4]
	packet.Param = param_array;
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <Sync_write+0x150>)
 8000330:	2220      	movs	r2, #32
 8000332:	18ba      	adds	r2, r7, r2
 8000334:	609a      	str	r2, [r3, #8]
	packet.Checksum = getChecksum(packet);
 8000336:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <Sync_write+0x150>)
 8000338:	6818      	ldr	r0, [r3, #0]
 800033a:	6859      	ldr	r1, [r3, #4]
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	f000 faf0 	bl	8000924 <getChecksum>
 8000344:	0003      	movs	r3, r0
 8000346:	001a      	movs	r2, r3
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <Sync_write+0x150>)
 800034a:	731a      	strb	r2, [r3, #12]
    AxelFlow_fire(&huart2, packet);
 800034c:	0038      	movs	r0, r7
 800034e:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <Sync_write+0x150>)
 8000350:	4c08      	ldr	r4, [pc, #32]	@ (8000374 <Sync_write+0x154>)
 8000352:	466a      	mov	r2, sp
 8000354:	0011      	movs	r1, r2
 8000356:	001a      	movs	r2, r3
 8000358:	3208      	adds	r2, #8
 800035a:	ca60      	ldmia	r2!, {r5, r6}
 800035c:	c160      	stmia	r1!, {r5, r6}
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	0021      	movs	r1, r4
 8000364:	f000 f93c 	bl	80005e0 <AxelFlow_fire>
}
 8000368:	46c0      	nop			@ (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	b011      	add	sp, #68	@ 0x44
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	20000028 	.word	0x20000028
 8000374:	200000d0 	.word	0x200000d0

08000378 <struct_to_arr>:
	return pos;
}


void struct_to_arr(Instruction_Packet packet)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	003c      	movs	r4, r7
 8000380:	6020      	str	r0, [r4, #0]
 8000382:	6061      	str	r1, [r4, #4]
 8000384:	60a2      	str	r2, [r4, #8]
 8000386:	60e3      	str	r3, [r4, #12]
	info_array[0] = HEADER;
 8000388:	4b29      	ldr	r3, [pc, #164]	@ (8000430 <struct_to_arr+0xb8>)
 800038a:	22ff      	movs	r2, #255	@ 0xff
 800038c:	701a      	strb	r2, [r3, #0]
	info_array[1] = HEADER;
 800038e:	4b28      	ldr	r3, [pc, #160]	@ (8000430 <struct_to_arr+0xb8>)
 8000390:	22ff      	movs	r2, #255	@ 0xff
 8000392:	705a      	strb	r2, [r3, #1]
	info_array[2] = packet.Packet_ID;
 8000394:	003b      	movs	r3, r7
 8000396:	789a      	ldrb	r2, [r3, #2]
 8000398:	4b25      	ldr	r3, [pc, #148]	@ (8000430 <struct_to_arr+0xb8>)
 800039a:	709a      	strb	r2, [r3, #2]
	info_array[3] = packet.Length;
 800039c:	003b      	movs	r3, r7
 800039e:	78da      	ldrb	r2, [r3, #3]
 80003a0:	4b23      	ldr	r3, [pc, #140]	@ (8000430 <struct_to_arr+0xb8>)
 80003a2:	70da      	strb	r2, [r3, #3]
	info_array[4] = packet.Instruction;
 80003a4:	003b      	movs	r3, r7
 80003a6:	791a      	ldrb	r2, [r3, #4]
 80003a8:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <struct_to_arr+0xb8>)
 80003aa:	711a      	strb	r2, [r3, #4]

	for (uint8_t i = 5; i < packet.Length + 3; i++)
 80003ac:	2317      	movs	r3, #23
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	2205      	movs	r2, #5
 80003b2:	701a      	strb	r2, [r3, #0]
 80003b4:	e010      	b.n	80003d8 <struct_to_arr+0x60>
		info_array[i] = packet.Param[i - 5];
 80003b6:	003b      	movs	r3, r7
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	2017      	movs	r0, #23
 80003bc:	183b      	adds	r3, r7, r0
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b05      	subs	r3, #5
 80003c2:	18d2      	adds	r2, r2, r3
 80003c4:	183b      	adds	r3, r7, r0
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	7811      	ldrb	r1, [r2, #0]
 80003ca:	4a19      	ldr	r2, [pc, #100]	@ (8000430 <struct_to_arr+0xb8>)
 80003cc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 80003ce:	183b      	adds	r3, r7, r0
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	183b      	adds	r3, r7, r0
 80003d4:	3201      	adds	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	003b      	movs	r3, r7
 80003da:	78db      	ldrb	r3, [r3, #3]
 80003dc:	1c9a      	adds	r2, r3, #2
 80003de:	2317      	movs	r3, #23
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dae6      	bge.n	80003b6 <struct_to_arr+0x3e>

	info_array[packet.Length + 3] = packet.Checksum;
 80003e8:	003b      	movs	r3, r7
 80003ea:	78db      	ldrb	r3, [r3, #3]
 80003ec:	3303      	adds	r3, #3
 80003ee:	003a      	movs	r2, r7
 80003f0:	7b11      	ldrb	r1, [r2, #12]
 80003f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000430 <struct_to_arr+0xb8>)
 80003f4:	54d1      	strb	r1, [r2, r3]

	for (uint8_t i = packet.Length + 4; i <= INSTRUCTION_FRAME_BUFFER; i++)
 80003f6:	003b      	movs	r3, r7
 80003f8:	78da      	ldrb	r2, [r3, #3]
 80003fa:	2316      	movs	r3, #22
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	3204      	adds	r2, #4
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	e00a      	b.n	800041a <struct_to_arr+0xa2>
	{
		info_array[i] = 0;
 8000404:	2016      	movs	r0, #22
 8000406:	183b      	adds	r3, r7, r0
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	4a09      	ldr	r2, [pc, #36]	@ (8000430 <struct_to_arr+0xb8>)
 800040c:	2100      	movs	r1, #0
 800040e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = packet.Length + 4; i <= INSTRUCTION_FRAME_BUFFER; i++)
 8000410:	183b      	adds	r3, r7, r0
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	183b      	adds	r3, r7, r0
 8000416:	3201      	adds	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
 800041a:	2316      	movs	r3, #22
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b0f      	cmp	r3, #15
 8000422:	d9ef      	bls.n	8000404 <struct_to_arr+0x8c>
	}
}
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b007      	add	sp, #28
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	20000038 	.word	0x20000038

08000434 <int_to_hex>:
    for (int i = 0; i < byteCount; i++) {
        result |= ((int32_t)hexBytes[i] << (i * 8));
    }
    return result;
}
uint8_t int_to_hex(int decimalNumber, unsigned char *lowByte, unsigned char *highByte) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
    uint16_t hex_value;

    // If value is negative, set the 15th bit
    if (decimalNumber < 0) {
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2b00      	cmp	r3, #0
 8000444:	da09      	bge.n	800045a <int_to_hex+0x26>
        hex_value = (uint16_t)(-decimalNumber) | 0x8000;  // Set the 15th bit for negative direction
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	b29b      	uxth	r3, r3
 800044a:	425b      	negs	r3, r3
 800044c:	b29a      	uxth	r2, r3
 800044e:	2316      	movs	r3, #22
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	490d      	ldr	r1, [pc, #52]	@ (8000488 <int_to_hex+0x54>)
 8000454:	430a      	orrs	r2, r1
 8000456:	801a      	strh	r2, [r3, #0]
 8000458:	e003      	b.n	8000462 <int_to_hex+0x2e>
    } else {
        hex_value = (uint16_t)decimalNumber;
 800045a:	2316      	movs	r3, #22
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	801a      	strh	r2, [r3, #0]
    }

    // Convert to little-endian format
    *lowByte = hex_value & 0xFF;
 8000462:	2116      	movs	r1, #22
 8000464:	187b      	adds	r3, r7, r1
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	b2da      	uxtb	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	701a      	strb	r2, [r3, #0]
    *highByte = (hex_value >> 8) & 0xFF;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	b29b      	uxth	r3, r3
 8000476:	b2da      	uxtb	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	701a      	strb	r2, [r3, #0]
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	0018      	movs	r0, r3
 8000480:	46bd      	mov	sp, r7
 8000482:	b006      	add	sp, #24
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	ffff8000 	.word	0xffff8000

0800048c <arr_to_struct>:


Status_Packet arr_to_struct(uint8_t array[])
{
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	b091      	sub	sp, #68	@ 0x44
 8000490:	af00      	add	r7, sp, #0
 8000492:	61f8      	str	r0, [r7, #28]
 8000494:	61b9      	str	r1, [r7, #24]
 8000496:	4669      	mov	r1, sp
 8000498:	000e      	movs	r6, r1
	Status_Packet packet;
	packet.Header_1 = array[0];
 800049a:	69b9      	ldr	r1, [r7, #24]
 800049c:	7808      	ldrb	r0, [r1, #0]
 800049e:	210c      	movs	r1, #12
 80004a0:	000b      	movs	r3, r1
 80004a2:	2218      	movs	r2, #24
 80004a4:	188a      	adds	r2, r1, r2
 80004a6:	19d1      	adds	r1, r2, r7
 80004a8:	7008      	strb	r0, [r1, #0]
	packet.Header_2 = array[1];
 80004aa:	69b9      	ldr	r1, [r7, #24]
 80004ac:	7848      	ldrb	r0, [r1, #1]
 80004ae:	0019      	movs	r1, r3
 80004b0:	000b      	movs	r3, r1
 80004b2:	2218      	movs	r2, #24
 80004b4:	188a      	adds	r2, r1, r2
 80004b6:	19d1      	adds	r1, r2, r7
 80004b8:	7048      	strb	r0, [r1, #1]
	packet.Packet_ID = array[2];
 80004ba:	69b9      	ldr	r1, [r7, #24]
 80004bc:	7888      	ldrb	r0, [r1, #2]
 80004be:	0019      	movs	r1, r3
 80004c0:	000b      	movs	r3, r1
 80004c2:	2218      	movs	r2, #24
 80004c4:	188a      	adds	r2, r1, r2
 80004c6:	19d1      	adds	r1, r2, r7
 80004c8:	7088      	strb	r0, [r1, #2]
	packet.Length = array[3];
 80004ca:	69b9      	ldr	r1, [r7, #24]
 80004cc:	78c8      	ldrb	r0, [r1, #3]
 80004ce:	0019      	movs	r1, r3
 80004d0:	000b      	movs	r3, r1
 80004d2:	2218      	movs	r2, #24
 80004d4:	188a      	adds	r2, r1, r2
 80004d6:	19d1      	adds	r1, r2, r7
 80004d8:	70c8      	strb	r0, [r1, #3]
	packet.Error = array[4];
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	7908      	ldrb	r0, [r1, #4]
 80004de:	0019      	movs	r1, r3
 80004e0:	000b      	movs	r3, r1
 80004e2:	2218      	movs	r2, #24
 80004e4:	188a      	adds	r2, r1, r2
 80004e6:	19d1      	adds	r1, r2, r7
 80004e8:	7108      	strb	r0, [r1, #4]
	uint8_t prm[packet.Length - 2];
 80004ea:	0019      	movs	r1, r3
 80004ec:	2318      	movs	r3, #24
 80004ee:	18cb      	adds	r3, r1, r3
 80004f0:	19d9      	adds	r1, r3, r7
 80004f2:	78c9      	ldrb	r1, [r1, #3]
 80004f4:	3902      	subs	r1, #2
 80004f6:	1e48      	subs	r0, r1, #1
 80004f8:	63b8      	str	r0, [r7, #56]	@ 0x38
 80004fa:	0008      	movs	r0, r1
 80004fc:	6138      	str	r0, [r7, #16]
 80004fe:	2000      	movs	r0, #0
 8000500:	6178      	str	r0, [r7, #20]
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	0010      	movs	r0, r2
 8000508:	0f40      	lsrs	r0, r0, #29
 800050a:	613a      	str	r2, [r7, #16]
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	00dd      	lsls	r5, r3, #3
 8000510:	4305      	orrs	r5, r0
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	00dc      	lsls	r4, r3, #3
 8000516:	0008      	movs	r0, r1
 8000518:	6038      	str	r0, [r7, #0]
 800051a:	2000      	movs	r0, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	683c      	ldr	r4, [r7, #0]
 8000520:	687d      	ldr	r5, [r7, #4]
 8000522:	0023      	movs	r3, r4
 8000524:	0f58      	lsrs	r0, r3, #29
 8000526:	002b      	movs	r3, r5
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4303      	orrs	r3, r0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	0023      	movs	r3, r4
 8000534:	00db      	lsls	r3, r3, #3
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	000b      	movs	r3, r1
 800053a:	3307      	adds	r3, #7
 800053c:	08db      	lsrs	r3, r3, #3
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	466a      	mov	r2, sp
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	469d      	mov	sp, r3
 8000546:	466b      	mov	r3, sp
 8000548:	3300      	adds	r3, #0
 800054a:	637b      	str	r3, [r7, #52]	@ 0x34
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 800054c:	2327      	movs	r3, #39	@ 0x27
 800054e:	2218      	movs	r2, #24
 8000550:	189b      	adds	r3, r3, r2
 8000552:	19db      	adds	r3, r3, r7
 8000554:	2205      	movs	r2, #5
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e017      	b.n	800058a <arr_to_struct+0xfe>
	{
		prm[i - 5] = array[i];
 800055a:	2027      	movs	r0, #39	@ 0x27
 800055c:	2318      	movs	r3, #24
 800055e:	18c3      	adds	r3, r0, r3
 8000560:	19db      	adds	r3, r3, r7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	18d2      	adds	r2, r2, r3
 8000568:	2318      	movs	r3, #24
 800056a:	18c3      	adds	r3, r0, r3
 800056c:	19db      	adds	r3, r3, r7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	3b05      	subs	r3, #5
 8000572:	7811      	ldrb	r1, [r2, #0]
 8000574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000576:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 8000578:	2318      	movs	r3, #24
 800057a:	18c3      	adds	r3, r0, r3
 800057c:	19db      	adds	r3, r3, r7
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	2318      	movs	r3, #24
 8000582:	18c3      	adds	r3, r0, r3
 8000584:	19db      	adds	r3, r3, r7
 8000586:	3201      	adds	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	210c      	movs	r1, #12
 800058c:	2318      	movs	r3, #24
 800058e:	18cb      	adds	r3, r1, r3
 8000590:	19db      	adds	r3, r3, r7
 8000592:	78db      	ldrb	r3, [r3, #3]
 8000594:	1c9a      	adds	r2, r3, #2
 8000596:	2327      	movs	r3, #39	@ 0x27
 8000598:	2018      	movs	r0, #24
 800059a:	181b      	adds	r3, r3, r0
 800059c:	19db      	adds	r3, r3, r7
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dada      	bge.n	800055a <arr_to_struct+0xce>
	}
	packet.Param = prm;
 80005a4:	2318      	movs	r3, #24
 80005a6:	18cb      	adds	r3, r1, r3
 80005a8:	19db      	adds	r3, r3, r7
 80005aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005ac:	609a      	str	r2, [r3, #8]
	packet.Checksum = array[packet.Length + 3];
 80005ae:	2318      	movs	r3, #24
 80005b0:	18cb      	adds	r3, r1, r3
 80005b2:	19db      	adds	r3, r3, r7
 80005b4:	78db      	ldrb	r3, [r3, #3]
 80005b6:	3303      	adds	r3, #3
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	2318      	movs	r3, #24
 80005c0:	18cb      	adds	r3, r1, r3
 80005c2:	19db      	adds	r3, r3, r7
 80005c4:	731a      	strb	r2, [r3, #12]

	return packet;
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	2218      	movs	r2, #24
 80005ca:	188a      	adds	r2, r1, r2
 80005cc:	19d2      	adds	r2, r2, r7
 80005ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005d0:	c313      	stmia	r3!, {r0, r1, r4}
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	46b5      	mov	sp, r6
}
 80005d8:	69f8      	ldr	r0, [r7, #28]
 80005da:	46bd      	mov	sp, r7
 80005dc:	b011      	add	sp, #68	@ 0x44
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005e0 <AxelFlow_fire>:



Status_Packet AxelFlow_fire(UART_HandleTypeDef *huart, Instruction_Packet ip)
{
 80005e0:	b082      	sub	sp, #8
 80005e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e4:	46c6      	mov	lr, r8
 80005e6:	b500      	push	{lr}
 80005e8:	b0b8      	sub	sp, #224	@ 0xe0
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80005ee:	6239      	str	r1, [r7, #32]
 80005f0:	26d8      	movs	r6, #216	@ 0xd8
 80005f2:	2018      	movs	r0, #24
 80005f4:	1831      	adds	r1, r6, r0
 80005f6:	2408      	movs	r4, #8
 80005f8:	46a4      	mov	ip, r4
 80005fa:	44bc      	add	ip, r7
 80005fc:	4461      	add	r1, ip
 80005fe:	600a      	str	r2, [r1, #0]
 8000600:	604b      	str	r3, [r1, #4]
 8000602:	466b      	mov	r3, sp
 8000604:	4698      	mov	r8, r3
	HAL_StatusTypeDef err1, err2;
#ifndef DEBUG_PRINT_COMMUNICATION
	(void) err1, (void) err2; // silence warnings
#endif
	uint8_t Status_array[STATUS_FRAME_BUFFER];
	memset(Status_array, 0, STATUS_FRAME_BUFFER);
 8000606:	23a4      	movs	r3, #164	@ 0xa4
 8000608:	0004      	movs	r4, r0
 800060a:	181a      	adds	r2, r3, r0
 800060c:	2308      	movs	r3, #8
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	220a      	movs	r2, #10
 8000614:	2100      	movs	r1, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f002 fdd4 	bl	80031c4 <memset>
	struct_to_arr(ip);
 800061c:	0023      	movs	r3, r4
 800061e:	001c      	movs	r4, r3
 8000620:	18f2      	adds	r2, r6, r3
 8000622:	2308      	movs	r3, #8
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	6859      	ldr	r1, [r3, #4]
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	f7ff fea2 	bl	8000378 <struct_to_arr>

	UART_HandleTypeDef huart2 = *huart;
 8000634:	201c      	movs	r0, #28
 8000636:	0023      	movs	r3, r4
 8000638:	001c      	movs	r4, r3
 800063a:	18c2      	adds	r2, r0, r3
 800063c:	2308      	movs	r3, #8
 800063e:	469c      	mov	ip, r3
 8000640:	44bc      	add	ip, r7
 8000642:	4462      	add	r2, ip
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	0010      	movs	r0, r2
 8000648:	0019      	movs	r1, r3
 800064a:	2388      	movs	r3, #136	@ 0x88
 800064c:	001a      	movs	r2, r3
 800064e:	f002 fde5 	bl	800321c <memcpy>

	err1 = HAL_UART_Transmit(&huart2, info_array, ip.Length + 4, HAL_MAX_DELAY);
 8000652:	0020      	movs	r0, r4
 8000654:	1833      	adds	r3, r6, r0
 8000656:	2208      	movs	r2, #8
 8000658:	4694      	mov	ip, r2
 800065a:	44bc      	add	ip, r7
 800065c:	4463      	add	r3, ip
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	3304      	adds	r3, #4
 8000662:	b29a      	uxth	r2, r3
 8000664:	21bc      	movs	r1, #188	@ 0xbc
 8000666:	0004      	movs	r4, r0
 8000668:	180b      	adds	r3, r1, r0
 800066a:	2108      	movs	r1, #8
 800066c:	1879      	adds	r1, r7, r1
 800066e:	185e      	adds	r6, r3, r1
 8000670:	2301      	movs	r3, #1
 8000672:	425b      	negs	r3, r3
 8000674:	49aa      	ldr	r1, [pc, #680]	@ (8000920 <AxelFlow_fire+0x340>)
 8000676:	201c      	movs	r0, #28
 8000678:	1900      	adds	r0, r0, r4
 800067a:	2508      	movs	r5, #8
 800067c:	46ac      	mov	ip, r5
 800067e:	44bc      	add	ip, r7
 8000680:	4460      	add	r0, ip
 8000682:	f001 fd75 	bl	8002170 <HAL_UART_Transmit>
 8000686:	0003      	movs	r3, r0
 8000688:	7033      	strb	r3, [r6, #0]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // Enable receive interrupt after transmission
 800068a:	201c      	movs	r0, #28
 800068c:	0026      	movs	r6, r4
 800068e:	1983      	adds	r3, r0, r6
 8000690:	2208      	movs	r2, #8
 8000692:	4694      	mov	ip, r2
 8000694:	44bc      	add	ip, r7
 8000696:	4463      	add	r3, ip
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	1983      	adds	r3, r0, r6
 800069e:	2108      	movs	r1, #8
 80006a0:	468c      	mov	ip, r1
 80006a2:	44bc      	add	ip, r7
 80006a4:	4463      	add	r3, ip
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2120      	movs	r1, #32
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]
	err2 = HAL_UART_Receive(&huart2, Status_array, STATUS_FRAME_BUFFER,
 80006ae:	22bb      	movs	r2, #187	@ 0xbb
 80006b0:	0031      	movs	r1, r6
 80006b2:	1853      	adds	r3, r2, r1
 80006b4:	2208      	movs	r2, #8
 80006b6:	18ba      	adds	r2, r7, r2
 80006b8:	189e      	adds	r6, r3, r2
 80006ba:	23a4      	movs	r3, #164	@ 0xa4
 80006bc:	000a      	movs	r2, r1
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	2108      	movs	r1, #8
 80006c2:	1879      	adds	r1, r7, r1
 80006c4:	1859      	adds	r1, r3, r1
 80006c6:	0014      	movs	r4, r2
 80006c8:	1883      	adds	r3, r0, r2
 80006ca:	2208      	movs	r2, #8
 80006cc:	18ba      	adds	r2, r7, r2
 80006ce:	1898      	adds	r0, r3, r2
 80006d0:	2332      	movs	r3, #50	@ 0x32
 80006d2:	220a      	movs	r2, #10
 80006d4:	f001 fdec 	bl	80022b0 <HAL_UART_Receive>
 80006d8:	0003      	movs	r3, r0
 80006da:	7033      	strb	r3, [r6, #0]
	STATUS_PACKET_TIMEOUT);
	uint8_t Start_Index = 0;
 80006dc:	23bf      	movs	r3, #191	@ 0xbf
 80006de:	0021      	movs	r1, r4
 80006e0:	185b      	adds	r3, r3, r1
 80006e2:	2208      	movs	r2, #8
 80006e4:	4694      	mov	ip, r2
 80006e6:	44bc      	add	ip, r7
 80006e8:	4463      	add	r3, ip
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < STATUS_FRAME_BUFFER - 1; i++)
 80006ee:	23be      	movs	r3, #190	@ 0xbe
 80006f0:	185b      	adds	r3, r3, r1
 80006f2:	2208      	movs	r2, #8
 80006f4:	4694      	mov	ip, r2
 80006f6:	44bc      	add	ip, r7
 80006f8:	4463      	add	r3, ip
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e04f      	b.n	80007a0 <AxelFlow_fire+0x1c0>
	{
		if (Status_array[i] == 0xFF && Status_array[i + 1] == 0xFF
 8000700:	21be      	movs	r1, #190	@ 0xbe
 8000702:	2418      	movs	r4, #24
 8000704:	190b      	adds	r3, r1, r4
 8000706:	2208      	movs	r2, #8
 8000708:	4694      	mov	ip, r2
 800070a:	44bc      	add	ip, r7
 800070c:	4463      	add	r3, ip
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	20a4      	movs	r0, #164	@ 0xa4
 8000712:	1902      	adds	r2, r0, r4
 8000714:	2508      	movs	r5, #8
 8000716:	46ac      	mov	ip, r5
 8000718:	44bc      	add	ip, r7
 800071a:	4462      	add	r2, ip
 800071c:	5cd3      	ldrb	r3, [r2, r3]
 800071e:	2bff      	cmp	r3, #255	@ 0xff
 8000720:	d12f      	bne.n	8000782 <AxelFlow_fire+0x1a2>
 8000722:	0022      	movs	r2, r4
 8000724:	188b      	adds	r3, r1, r2
 8000726:	2408      	movs	r4, #8
 8000728:	46a4      	mov	ip, r4
 800072a:	44bc      	add	ip, r7
 800072c:	4463      	add	r3, ip
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	0014      	movs	r4, r2
 8000734:	1882      	adds	r2, r0, r2
 8000736:	2508      	movs	r5, #8
 8000738:	46ac      	mov	ip, r5
 800073a:	44bc      	add	ip, r7
 800073c:	4462      	add	r2, ip
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	2bff      	cmp	r3, #255	@ 0xff
 8000742:	d11e      	bne.n	8000782 <AxelFlow_fire+0x1a2>
				&& Status_array[i + 2] != 0xFF)
 8000744:	0022      	movs	r2, r4
 8000746:	188b      	adds	r3, r1, r2
 8000748:	2408      	movs	r4, #8
 800074a:	46a4      	mov	ip, r4
 800074c:	44bc      	add	ip, r7
 800074e:	4463      	add	r3, ip
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3302      	adds	r3, #2
 8000754:	0014      	movs	r4, r2
 8000756:	1882      	adds	r2, r0, r2
 8000758:	2008      	movs	r0, #8
 800075a:	4684      	mov	ip, r0
 800075c:	44bc      	add	ip, r7
 800075e:	4462      	add	r2, ip
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	2bff      	cmp	r3, #255	@ 0xff
 8000764:	d00d      	beq.n	8000782 <AxelFlow_fire+0x1a2>
		{
			Start_Index = i;
 8000766:	23bf      	movs	r3, #191	@ 0xbf
 8000768:	191b      	adds	r3, r3, r4
 800076a:	2208      	movs	r2, #8
 800076c:	4694      	mov	ip, r2
 800076e:	44bc      	add	ip, r7
 8000770:	4463      	add	r3, ip
 8000772:	190a      	adds	r2, r1, r4
 8000774:	2108      	movs	r1, #8
 8000776:	468c      	mov	ip, r1
 8000778:	44bc      	add	ip, r7
 800077a:	4462      	add	r2, ip
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	701a      	strb	r2, [r3, #0]
			break;
 8000780:	e018      	b.n	80007b4 <AxelFlow_fire+0x1d4>
	for (uint8_t i = 0; i < STATUS_FRAME_BUFFER - 1; i++)
 8000782:	21be      	movs	r1, #190	@ 0xbe
 8000784:	2018      	movs	r0, #24
 8000786:	180b      	adds	r3, r1, r0
 8000788:	2208      	movs	r2, #8
 800078a:	4694      	mov	ip, r2
 800078c:	44bc      	add	ip, r7
 800078e:	4463      	add	r3, ip
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	180b      	adds	r3, r1, r0
 8000794:	2108      	movs	r1, #8
 8000796:	468c      	mov	ip, r1
 8000798:	44bc      	add	ip, r7
 800079a:	4463      	add	r3, ip
 800079c:	3201      	adds	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	23be      	movs	r3, #190	@ 0xbe
 80007a2:	2218      	movs	r2, #24
 80007a4:	189b      	adds	r3, r3, r2
 80007a6:	2208      	movs	r2, #8
 80007a8:	4694      	mov	ip, r2
 80007aa:	44bc      	add	ip, r7
 80007ac:	4463      	add	r3, ip
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d9a5      	bls.n	8000700 <AxelFlow_fire+0x120>
		}
	}
	uint8_t Status_array_filtered[Status_array[Start_Index + 3] + 4];
 80007b4:	23bf      	movs	r3, #191	@ 0xbf
 80007b6:	2418      	movs	r4, #24
 80007b8:	191b      	adds	r3, r3, r4
 80007ba:	2208      	movs	r2, #8
 80007bc:	4694      	mov	ip, r2
 80007be:	44bc      	add	ip, r7
 80007c0:	4463      	add	r3, ip
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3303      	adds	r3, #3
 80007c6:	22a4      	movs	r2, #164	@ 0xa4
 80007c8:	1912      	adds	r2, r2, r4
 80007ca:	2108      	movs	r1, #8
 80007cc:	468c      	mov	ip, r1
 80007ce:	44bc      	add	ip, r7
 80007d0:	4462      	add	r2, ip
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	3304      	adds	r3, #4
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	21b4      	movs	r1, #180	@ 0xb4
 80007da:	1909      	adds	r1, r1, r4
 80007dc:	2008      	movs	r0, #8
 80007de:	4684      	mov	ip, r0
 80007e0:	44bc      	add	ip, r7
 80007e2:	4461      	add	r1, ip
 80007e4:	600a      	str	r2, [r1, #0]
 80007e6:	001a      	movs	r2, r3
 80007e8:	613a      	str	r2, [r7, #16]
 80007ea:	2200      	movs	r2, #0
 80007ec:	617a      	str	r2, [r7, #20]
 80007ee:	6938      	ldr	r0, [r7, #16]
 80007f0:	6979      	ldr	r1, [r7, #20]
 80007f2:	0002      	movs	r2, r0
 80007f4:	0f52      	lsrs	r2, r2, #29
 80007f6:	000e      	movs	r6, r1
 80007f8:	00f6      	lsls	r6, r6, #3
 80007fa:	61fe      	str	r6, [r7, #28]
 80007fc:	69fe      	ldr	r6, [r7, #28]
 80007fe:	4316      	orrs	r6, r2
 8000800:	61fe      	str	r6, [r7, #28]
 8000802:	0002      	movs	r2, r0
 8000804:	00d2      	lsls	r2, r2, #3
 8000806:	61ba      	str	r2, [r7, #24]
 8000808:	001a      	movs	r2, r3
 800080a:	60ba      	str	r2, [r7, #8]
 800080c:	2200      	movs	r2, #0
 800080e:	60fa      	str	r2, [r7, #12]
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	0002      	movs	r2, r0
 8000816:	0f52      	lsrs	r2, r2, #29
 8000818:	000e      	movs	r6, r1
 800081a:	00f5      	lsls	r5, r6, #3
 800081c:	607d      	str	r5, [r7, #4]
 800081e:	687d      	ldr	r5, [r7, #4]
 8000820:	4315      	orrs	r5, r2
 8000822:	607d      	str	r5, [r7, #4]
 8000824:	0002      	movs	r2, r0
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	603a      	str	r2, [r7, #0]
 800082a:	001a      	movs	r2, r3
 800082c:	3207      	adds	r2, #7
 800082e:	08d2      	lsrs	r2, r2, #3
 8000830:	00d2      	lsls	r2, r2, #3
 8000832:	4669      	mov	r1, sp
 8000834:	1a8a      	subs	r2, r1, r2
 8000836:	4695      	mov	sp, r2
 8000838:	466a      	mov	r2, sp
 800083a:	3200      	adds	r2, #0
 800083c:	21b0      	movs	r1, #176	@ 0xb0
 800083e:	1909      	adds	r1, r1, r4
 8000840:	2008      	movs	r0, #8
 8000842:	4684      	mov	ip, r0
 8000844:	44bc      	add	ip, r7
 8000846:	4461      	add	r1, ip
 8000848:	600a      	str	r2, [r1, #0]

	for (uint8_t i = 0; i < sizeof(Status_array_filtered); i++)
 800084a:	22bd      	movs	r2, #189	@ 0xbd
 800084c:	1912      	adds	r2, r2, r4
 800084e:	2108      	movs	r1, #8
 8000850:	468c      	mov	ip, r1
 8000852:	44bc      	add	ip, r7
 8000854:	4462      	add	r2, ip
 8000856:	2100      	movs	r1, #0
 8000858:	7011      	strb	r1, [r2, #0]
 800085a:	e031      	b.n	80008c0 <AxelFlow_fire+0x2e0>
	{
		Status_array_filtered[i] = Status_array[Start_Index + i];
 800085c:	22bf      	movs	r2, #191	@ 0xbf
 800085e:	2518      	movs	r5, #24
 8000860:	1952      	adds	r2, r2, r5
 8000862:	2108      	movs	r1, #8
 8000864:	468c      	mov	ip, r1
 8000866:	44bc      	add	ip, r7
 8000868:	4462      	add	r2, ip
 800086a:	7811      	ldrb	r1, [r2, #0]
 800086c:	24bd      	movs	r4, #189	@ 0xbd
 800086e:	1962      	adds	r2, r4, r5
 8000870:	2008      	movs	r0, #8
 8000872:	4684      	mov	ip, r0
 8000874:	44bc      	add	ip, r7
 8000876:	4462      	add	r2, ip
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	1889      	adds	r1, r1, r2
 800087c:	1962      	adds	r2, r4, r5
 800087e:	2008      	movs	r0, #8
 8000880:	4684      	mov	ip, r0
 8000882:	44bc      	add	ip, r7
 8000884:	4462      	add	r2, ip
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	20a4      	movs	r0, #164	@ 0xa4
 800088a:	1940      	adds	r0, r0, r5
 800088c:	2608      	movs	r6, #8
 800088e:	46b4      	mov	ip, r6
 8000890:	44bc      	add	ip, r7
 8000892:	4460      	add	r0, ip
 8000894:	5c40      	ldrb	r0, [r0, r1]
 8000896:	21b0      	movs	r1, #176	@ 0xb0
 8000898:	1949      	adds	r1, r1, r5
 800089a:	2608      	movs	r6, #8
 800089c:	46b4      	mov	ip, r6
 800089e:	44bc      	add	ip, r7
 80008a0:	4461      	add	r1, ip
 80008a2:	6809      	ldr	r1, [r1, #0]
 80008a4:	5488      	strb	r0, [r1, r2]
	for (uint8_t i = 0; i < sizeof(Status_array_filtered); i++)
 80008a6:	1962      	adds	r2, r4, r5
 80008a8:	2108      	movs	r1, #8
 80008aa:	468c      	mov	ip, r1
 80008ac:	44bc      	add	ip, r7
 80008ae:	4462      	add	r2, ip
 80008b0:	7811      	ldrb	r1, [r2, #0]
 80008b2:	1962      	adds	r2, r4, r5
 80008b4:	2008      	movs	r0, #8
 80008b6:	4684      	mov	ip, r0
 80008b8:	44bc      	add	ip, r7
 80008ba:	4462      	add	r2, ip
 80008bc:	3101      	adds	r1, #1
 80008be:	7011      	strb	r1, [r2, #0]
 80008c0:	22bd      	movs	r2, #189	@ 0xbd
 80008c2:	2518      	movs	r5, #24
 80008c4:	1952      	adds	r2, r2, r5
 80008c6:	2108      	movs	r1, #8
 80008c8:	468c      	mov	ip, r1
 80008ca:	44bc      	add	ip, r7
 80008cc:	4462      	add	r2, ip
 80008ce:	7812      	ldrb	r2, [r2, #0]
 80008d0:	0019      	movs	r1, r3
 80008d2:	428a      	cmp	r2, r1
 80008d4:	d3c2      	bcc.n	800085c <AxelFlow_fire+0x27c>
	}
	Status_Packet packet = arr_to_struct(Status_array_filtered);
 80008d6:	240c      	movs	r4, #12
 80008d8:	1963      	adds	r3, r4, r5
 80008da:	2208      	movs	r2, #8
 80008dc:	4694      	mov	ip, r2
 80008de:	44bc      	add	ip, r7
 80008e0:	4463      	add	r3, ip
 80008e2:	22b0      	movs	r2, #176	@ 0xb0
 80008e4:	1952      	adds	r2, r2, r5
 80008e6:	2108      	movs	r1, #8
 80008e8:	468c      	mov	ip, r1
 80008ea:	44bc      	add	ip, r7
 80008ec:	4462      	add	r2, ip
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fdca 	bl	800048c <arr_to_struct>
//	}
//	else{
//		uint8_t error[30] = "OTHERERROR\n";
//		HAL_UART_Transmit(&huart1,error, sizeof(error), HAL_MAX_DELAY);
//	}
	return packet;
 80008f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fa:	1962      	adds	r2, r4, r5
 80008fc:	2108      	movs	r1, #8
 80008fe:	468c      	mov	ip, r1
 8000900:	44bc      	add	ip, r7
 8000902:	4462      	add	r2, ip
 8000904:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000906:	c313      	stmia	r3!, {r0, r1, r4}
 8000908:	6812      	ldr	r2, [r2, #0]
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	46c5      	mov	sp, r8

	// TODO clean out received data.
}
 800090e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000910:	46bd      	mov	sp, r7
 8000912:	b038      	add	sp, #224	@ 0xe0
 8000914:	bc80      	pop	{r7}
 8000916:	46b8      	mov	r8, r7
 8000918:	bcf0      	pop	{r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	b002      	add	sp, #8
 800091e:	4718      	bx	r3
 8000920:	20000038 	.word	0x20000038

08000924 <getChecksum>:
void DegtoInt(int deg){

}

uint8_t getChecksum()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	uint8_t sum = packet.Packet_ID + packet.Length + packet.Instruction;
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <getChecksum+0x64>)
 800092c:	789a      	ldrb	r2, [r3, #2]
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <getChecksum+0x64>)
 8000930:	78db      	ldrb	r3, [r3, #3]
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	b2d9      	uxtb	r1, r3
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <getChecksum+0x64>)
 8000938:	791a      	ldrb	r2, [r3, #4]
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	188a      	adds	r2, r1, r2
 800093e:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < packet.Length - 2; i++)
 8000940:	1dbb      	adds	r3, r7, #6
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e00f      	b.n	8000968 <getChecksum+0x44>
	{
		sum += packet.Param[i];
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <getChecksum+0x64>)
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	7819      	ldrb	r1, [r3, #0]
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	1dfa      	adds	r2, r7, #7
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	188a      	adds	r2, r1, r2
 800095c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < packet.Length - 2; i++)
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	1dbb      	adds	r3, r7, #6
 8000964:	3201      	adds	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	1dbb      	adds	r3, r7, #6
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <getChecksum+0x64>)
 800096e:	78db      	ldrb	r3, [r3, #3]
 8000970:	3b02      	subs	r3, #2
 8000972:	429a      	cmp	r2, r3
 8000974:	dbe8      	blt.n	8000948 <getChecksum+0x24>
	}
	return ~sum;
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	43db      	mvns	r3, r3
 800097c:	b2db      	uxtb	r3, r3
}
 800097e:	0018      	movs	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	20000028 	.word	0x20000028

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	b08d      	sub	sp, #52	@ 0x34
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fa87 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f863 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 f925 	bl	8000be8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099e:	f000 f8f1 	bl	8000b84 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009a2:	f000 f8bf 	bl	8000b24 <MX_USART1_UART_Init>

		//Target_location(500);
		//POSITION_CORRECTION(1000);
		//Operation_speed(500)
		//Ping(2);
		HAL_Delay(1000);
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fade 	bl	8000f6c <HAL_Delay>
		uint8_t ID[2]= {1,2};
 80009b0:	211c      	movs	r1, #28
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <main+0xc8>)
 80009b6:	801a      	strh	r2, [r3, #0]
		uint8_t pos[2]={1000,1000};
 80009b8:	2018      	movs	r0, #24
 80009ba:	183b      	adds	r3, r7, r0
 80009bc:	4a26      	ldr	r2, [pc, #152]	@ (8000a58 <main+0xcc>)
 80009be:	801a      	strh	r2, [r3, #0]
		uint8_t time[2]={0,0};
 80009c0:	2514      	movs	r5, #20
 80009c2:	197b      	adds	r3, r7, r5
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
		uint8_t speed[2]={3000,3000};
 80009c8:	2610      	movs	r6, #16
 80009ca:	19bb      	adds	r3, r7, r6
 80009cc:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <main+0xd0>)
 80009ce:	801a      	strh	r2, [r3, #0]
		write_packet.ID= ID;
 80009d0:	2420      	movs	r4, #32
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	601a      	str	r2, [r3, #0]
		write_packet.pos=pos;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	183a      	adds	r2, r7, r0
 80009dc:	605a      	str	r2, [r3, #4]
		write_packet.speed=speed;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	19ba      	adds	r2, r7, r6
 80009e2:	60da      	str	r2, [r3, #12]
		write_packet.time=time;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	197a      	adds	r2, r7, r5
 80009e8:	609a      	str	r2, [r3, #8]
		Sync_write(write_packet);
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	6859      	ldr	r1, [r3, #4]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	f7ff fc14 	bl	8000220 <Sync_write>
		HAL_Delay(2000);
 80009f8:	23fa      	movs	r3, #250	@ 0xfa
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fab5 	bl	8000f6c <HAL_Delay>

//		HAL_Delay(0);
//		char buffer[30];
//		sprintf(buffer, "%u", CurrentLocation(1));
//	    AxelFlow_debug_println(buffer);
		uint8_t ID1[2]= {1,2};
 8000a02:	210c      	movs	r1, #12
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	4a13      	ldr	r2, [pc, #76]	@ (8000a54 <main+0xc8>)
 8000a08:	801a      	strh	r2, [r3, #0]
		uint8_t pos1[2]={0,0};
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	183b      	adds	r3, r7, r0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	801a      	strh	r2, [r3, #0]
		uint8_t time1[2]={0,0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	801a      	strh	r2, [r3, #0]
		uint8_t speed1[2]={3000,3000};
 8000a18:	003b      	movs	r3, r7
 8000a1a:	4a10      	ldr	r2, [pc, #64]	@ (8000a5c <main+0xd0>)
 8000a1c:	801a      	strh	r2, [r3, #0]
		write_packet.ID= ID1;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	187a      	adds	r2, r7, r1
 8000a22:	601a      	str	r2, [r3, #0]
		write_packet.pos=pos1;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	183a      	adds	r2, r7, r0
 8000a28:	605a      	str	r2, [r3, #4]
		write_packet.speed=speed1;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	003a      	movs	r2, r7
 8000a2e:	60da      	str	r2, [r3, #12]
		write_packet.time=time1;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	1d3a      	adds	r2, r7, #4
 8000a34:	609a      	str	r2, [r3, #8]
		Sync_write(write_packet);
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	6859      	ldr	r1, [r3, #4]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	f7ff fbee 	bl	8000220 <Sync_write>
		HAL_Delay(2000);
 8000a44:	23fa      	movs	r3, #250	@ 0xfa
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fa8f 	bl	8000f6c <HAL_Delay>
	while (1) {
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	e7a9      	b.n	80009a6 <main+0x1a>
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	00000201 	.word	0x00000201
 8000a58:	ffffe8e8 	.word	0xffffe8e8
 8000a5c:	ffffb8b8 	.word	0xffffb8b8

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b097      	sub	sp, #92	@ 0x5c
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	2428      	movs	r4, #40	@ 0x28
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2330      	movs	r3, #48	@ 0x30
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f002 fba7 	bl	80031c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a76:	2318      	movs	r3, #24
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f002 fb9f 	bl	80031c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2314      	movs	r3, #20
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f002 fb98 	bl	80031c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	0021      	movs	r1, r4
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2202      	movs	r2, #2
 8000a9a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2202      	movs	r2, #2
 8000aac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	22a0      	movs	r2, #160	@ 0xa0
 8000ab8:	0392      	lsls	r2, r2, #14
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fd67 	bl	8001598 <HAL_RCC_OscConfig>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ace:	f000 f8d1 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	2118      	movs	r1, #24
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2101      	movs	r1, #1
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 f86b 	bl	8001bcc <HAL_RCC_ClockConfig>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000afa:	f000 f8bb 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2201      	movs	r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 f9a1 	bl	8001e54 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b16:	f000 f8ad 	bl	8000c74 <Error_Handler>
  }
}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b017      	add	sp, #92	@ 0x5c
 8000b20:	bd90      	pop	{r4, r7, pc}
	...

08000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <MX_USART1_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b30:	22e1      	movs	r2, #225	@ 0xe1
 8000b32:	0252      	lsls	r2, r2, #9
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 fa51 	bl	8002010 <HAL_UART_Init>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f87f 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000048 	.word	0x20000048
 8000b80:	40013800 	.word	0x40013800

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_USART2_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <MX_USART2_UART_Init+0x60>)
 8000b92:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba8:	220c      	movs	r2, #12
 8000baa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f001 fa76 	bl	80020b8 <HAL_HalfDuplex_Init>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000bd0:	f000 f850 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	40004400 	.word	0x40004400
 8000be4:	000f4240 	.word	0x000f4240

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	@ 0x24
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	240c      	movs	r4, #12
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2314      	movs	r3, #20
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f002 fae3 	bl	80031c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0x88>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_GPIO_Init+0x88>)
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	03c9      	lsls	r1, r1, #15
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_GPIO_Init+0x88>)
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	03db      	lsls	r3, r3, #15
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0x88>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_GPIO_Init+0x88>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_GPIO_Init+0x88>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2288      	movs	r2, #136	@ 0x88
 8000c40:	0352      	lsls	r2, r2, #13
 8000c42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2201      	movs	r2, #1
 8000c48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	193a      	adds	r2, r7, r4
 8000c4c:	2390      	movs	r3, #144	@ 0x90
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fb0a 	bl	800126c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2005      	movs	r0, #5
 8000c5e:	f000 fa55 	bl	800110c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c62:	2005      	movs	r0, #5
 8000c64:	f000 fa67 	bl	8001136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b009      	add	sp, #36	@ 0x24
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	40021000 	.word	0x40021000

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x44>)
 8000c88:	699a      	ldr	r2, [r3, #24]
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_MspInit+0x44>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	619a      	str	r2, [r3, #24]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <HAL_MspInit+0x44>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	2201      	movs	r2, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x44>)
 8000ca0:	69da      	ldr	r2, [r3, #28]
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_MspInit+0x44>)
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	0549      	lsls	r1, r1, #21
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	61da      	str	r2, [r3, #28]
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_MspInit+0x44>)
 8000cae:	69da      	ldr	r2, [r3, #28]
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	055b      	lsls	r3, r3, #21
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b08d      	sub	sp, #52	@ 0x34
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	241c      	movs	r4, #28
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f002 fa72 	bl	80031c4 <memset>
  if(huart->Instance==USART1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ddc <HAL_UART_MspInit+0x114>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d134      	bne.n	8000d54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cea:	4b3d      	ldr	r3, [pc, #244]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	4b3c      	ldr	r3, [pc, #240]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	01c9      	lsls	r1, r1, #7
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	619a      	str	r2, [r3, #24]
 8000cf8:	4b39      	ldr	r3, [pc, #228]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	01db      	lsls	r3, r3, #7
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b36      	ldr	r3, [pc, #216]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	0289      	lsls	r1, r1, #10
 8000d10:	430a      	orrs	r2, r1
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	22c0      	movs	r2, #192	@ 0xc0
 8000d26:	00d2      	lsls	r2, r2, #3
 8000d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	0021      	movs	r1, r4
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2202      	movs	r2, #2
 8000d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2201      	movs	r2, #1
 8000d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	2390      	movs	r3, #144	@ 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fa8d 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d52:	e03f      	b.n	8000dd4 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <HAL_UART_MspInit+0x11c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d13a      	bne.n	8000dd4 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d64:	2180      	movs	r1, #128	@ 0x80
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	61da      	str	r2, [r3, #28]
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_UART_MspInit+0x118>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d96:	211c      	movs	r1, #28
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2212      	movs	r2, #18
 8000da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2201      	movs	r2, #1
 8000da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2203      	movs	r2, #3
 8000dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2201      	movs	r2, #1
 8000db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	2390      	movs	r3, #144	@ 0x90
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fa54 	bl	800126c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	201c      	movs	r0, #28
 8000dca:	f000 f99f 	bl	800110c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dce:	201c      	movs	r0, #28
 8000dd0:	f000 f9b1 	bl	8001136 <HAL_NVIC_EnableIRQ>
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b00d      	add	sp, #52	@ 0x34
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40004400 	.word	0x40004400

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f890 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fb94 	bl	800154c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <USART2_IRQHandler+0x14>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fb10 	bl	8002458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	200000d0 	.word	0x200000d0

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f7ff fff6 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e7e:	f002 f9a9 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff fd83 	bl	800098c <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e94:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 8000e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e9c:	2000015c 	.word	0x2000015c

08000ea0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_COMP_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_Init+0x24>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_Init+0x24>)
 8000eae:	2110      	movs	r1, #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f809 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eba:	f7ff fee1 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_InitTick+0x5c>)
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_InitTick+0x60>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	0019      	movs	r1, r3
 8000ede:	23fa      	movs	r3, #250	@ 0xfa
 8000ee0:	0098      	lsls	r0, r3, #2
 8000ee2:	f7ff f911 	bl	8000108 <__udivsi3>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	0020      	movs	r0, r4
 8000eec:	f7ff f90c 	bl	8000108 <__udivsi3>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f92f 	bl	8001156 <HAL_SYSTICK_Config>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e00f      	b.n	8000f20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d80b      	bhi.n	8000f1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 f8fc 	bl	800110c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_InitTick+0x64>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b003      	add	sp, #12
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_IncTick+0x1c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	18d2      	adds	r2, r2, r3
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000158 	.word	0x20000158

08000f58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b02      	ldr	r3, [pc, #8]	@ (8000f68 <HAL_GetTick+0x10>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	20000158 	.word	0x20000158

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff fff0 	bl	8000f58 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	f7ff ffe0 	bl	8000f58 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0002      	movs	r2, r0
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fc6:	d809      	bhi.n	8000fdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	231f      	movs	r3, #31
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_EnableIRQ+0x30>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4091      	lsls	r1, r2
 8000fd8:	000a      	movs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
  }
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffc:	d828      	bhi.n	8001050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	33c0      	adds	r3, #192	@ 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	589b      	ldr	r3, [r3, r2]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	@ 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	@ 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	481f      	ldr	r0, [pc, #124]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	33c0      	adds	r3, #192	@ 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104e:	e031      	b.n	80010b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0019      	movs	r1, r3
 8001058:	230f      	movs	r3, #15
 800105a:	400b      	ands	r3, r1
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3306      	adds	r3, #6
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	@ 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001c      	movs	r4, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18c3      	adds	r3, r0, r3
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d301      	bcc.n	80010dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d8:	2301      	movs	r3, #1
 80010da:	e010      	b.n	80010fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SysTick_Config+0x44>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff7c 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x44>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	0002      	movs	r2, r0
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff33 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ffaf 	bl	80010c4 <SysTick_Config>
 8001166:	0003      	movs	r3, r0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2221      	movs	r2, #33	@ 0x21
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2220      	movs	r2, #32
 800118e:	2100      	movs	r1, #0
 8001190:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e020      	b.n	80011d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	210e      	movs	r1, #14
 80011a2:	438a      	bics	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011be:	2101      	movs	r1, #1
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2221      	movs	r2, #33	@ 0x21
 80011ca:	2101      	movs	r1, #1
 80011cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2220      	movs	r2, #32
 80011d2:	2100      	movs	r1, #0
 80011d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	210f      	movs	r1, #15
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2221      	movs	r2, #33	@ 0x21
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d006      	beq.n	800120a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e028      	b.n	800125c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	210e      	movs	r1, #14
 8001216:	438a      	bics	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001232:	2101      	movs	r1, #1
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2221      	movs	r2, #33	@ 0x21
 800123e:	2101      	movs	r1, #1
 8001240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	0010      	movs	r0, r2
 800125a:	4798      	blx	r3
    }
  }
  return status;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e14f      	b.n	800151c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4091      	lsls	r1, r2
 8001286:	000a      	movs	r2, r1
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d100      	bne.n	8001294 <HAL_GPIO_Init+0x28>
 8001292:	e140      	b.n	8001516 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2203      	movs	r2, #3
 800129a:	4013      	ands	r3, r2
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	409a      	lsls	r2, r3
 80012ba:	0013      	movs	r3, r2
 80012bc:	43da      	mvns	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	2201      	movs	r2, #1
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	4013      	ands	r3, r2
 8001316:	2b03      	cmp	r3, #3
 8001318:	d017      	beq.n	800134a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	4013      	ands	r3, r2
 8001352:	2b02      	cmp	r3, #2
 8001354:	d123      	bne.n	800139e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	58d3      	ldr	r3, [r2, r3]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2207      	movs	r2, #7
 8001368:	4013      	ands	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2107      	movs	r1, #7
 8001382:	400b      	ands	r3, r1
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2203      	movs	r2, #3
 80013bc:	401a      	ands	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	23c0      	movs	r3, #192	@ 0xc0
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_GPIO_Init+0x174>
 80013de:	e09a      	b.n	8001516 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	4b54      	ldr	r3, [pc, #336]	@ (8001534 <HAL_GPIO_Init+0x2c8>)
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <HAL_GPIO_Init+0x2c8>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	619a      	str	r2, [r3, #24]
 80013ec:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <HAL_GPIO_Init+0x2c8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001538 <HAL_GPIO_Init+0x2cc>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	589b      	ldr	r3, [r3, r2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	2390      	movs	r3, #144	@ 0x90
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	429a      	cmp	r2, r3
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0x1e2>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a44      	ldr	r2, [pc, #272]	@ (800153c <HAL_GPIO_Init+0x2d0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x1de>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a43      	ldr	r2, [pc, #268]	@ (8001540 <HAL_GPIO_Init+0x2d4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x1da>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a42      	ldr	r2, [pc, #264]	@ (8001544 <HAL_GPIO_Init+0x2d8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x1d6>
 800143e:	2303      	movs	r3, #3
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x1e4>
 8001442:	2305      	movs	r3, #5
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x1e4>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x1e4>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x1e4>
 800144e:	2300      	movs	r3, #0
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	2103      	movs	r1, #3
 8001454:	400a      	ands	r2, r1
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	@ (8001538 <HAL_GPIO_Init+0x2cc>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001498:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014bc:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	029b      	lsls	r3, r3, #10
 80014da:	4013      	ands	r3, r2
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	4013      	ands	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_GPIO_Init+0x2dc>)
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	40da      	lsrs	r2, r3
 8001524:	1e13      	subs	r3, r2, #0
 8001526:	d000      	beq.n	800152a <HAL_GPIO_Init+0x2be>
 8001528:	e6a8      	b.n	800127c <HAL_GPIO_Init+0x10>
  } 
}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800
 8001544:	48000c00 	.word	0x48000c00
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	0002      	movs	r2, r0
 8001554:	1dbb      	adds	r3, r7, #6
 8001556:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	1dba      	adds	r2, r7, #6
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	4013      	ands	r3, r2
 8001562:	d008      	beq.n	8001576 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001566:	1dba      	adds	r2, r7, #6
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f000 f807 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	0002      	movs	r2, r0
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001590:	46c0      	nop			@ (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e301      	b.n	8001bae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	d100      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1e>
 80015b4:	e08d      	b.n	80016d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015b6:	4bc3      	ldr	r3, [pc, #780]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	220c      	movs	r2, #12
 80015bc:	4013      	ands	r3, r2
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d00e      	beq.n	80015e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c2:	4bc0      	ldr	r3, [pc, #768]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	220c      	movs	r2, #12
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x64>
 80015ce:	4bbd      	ldr	r3, [pc, #756]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	401a      	ands	r2, r3
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10d      	bne.n	80015fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4bb8      	ldr	r3, [pc, #736]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	d100      	bne.n	80015ee <HAL_RCC_OscConfig+0x56>
 80015ec:	e070      	b.n	80016d0 <HAL_RCC_OscConfig+0x138>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d000      	beq.n	80015f8 <HAL_RCC_OscConfig+0x60>
 80015f6:	e06b      	b.n	80016d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e2d8      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <HAL_RCC_OscConfig+0x7c>
 8001604:	4baf      	ldr	r3, [pc, #700]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4bae      	ldr	r3, [pc, #696]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800160a:	2180      	movs	r1, #128	@ 0x80
 800160c:	0249      	lsls	r1, r1, #9
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e02f      	b.n	8001674 <HAL_RCC_OscConfig+0xdc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x9e>
 800161c:	4ba9      	ldr	r3, [pc, #676]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4ba8      	ldr	r3, [pc, #672]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001622:	49a9      	ldr	r1, [pc, #676]	@ (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4ba6      	ldr	r3, [pc, #664]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4ba5      	ldr	r3, [pc, #660]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800162e:	49a7      	ldr	r1, [pc, #668]	@ (80018cc <HAL_RCC_OscConfig+0x334>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e01e      	b.n	8001674 <HAL_RCC_OscConfig+0xdc>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10e      	bne.n	800165c <HAL_RCC_OscConfig+0xc4>
 800163e:	4ba1      	ldr	r3, [pc, #644]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4ba0      	ldr	r3, [pc, #640]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	02c9      	lsls	r1, r1, #11
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	4b9d      	ldr	r3, [pc, #628]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b9c      	ldr	r3, [pc, #624]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	0249      	lsls	r1, r1, #9
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xdc>
 800165c:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b98      	ldr	r3, [pc, #608]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001662:	4999      	ldr	r1, [pc, #612]	@ (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4b96      	ldr	r3, [pc, #600]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b95      	ldr	r3, [pc, #596]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800166e:	4997      	ldr	r1, [pc, #604]	@ (80018cc <HAL_RCC_OscConfig+0x334>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d014      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fc6c 	bl	8000f58 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001686:	f7ff fc67 	bl	8000f58 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e28a      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001698:	4b8a      	ldr	r3, [pc, #552]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0xee>
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fc57 	bl	8000f58 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc52 	bl	8000f58 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e275      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	4b80      	ldr	r3, [pc, #512]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x118>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d100      	bne.n	80016de <HAL_RCC_OscConfig+0x146>
 80016dc:	e069      	b.n	80017b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016de:	4b79      	ldr	r3, [pc, #484]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	220c      	movs	r2, #12
 80016e4:	4013      	ands	r3, r2
 80016e6:	d00b      	beq.n	8001700 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016e8:	4b76      	ldr	r3, [pc, #472]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	220c      	movs	r2, #12
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d11c      	bne.n	800172e <HAL_RCC_OscConfig+0x196>
 80016f4:	4b73      	ldr	r3, [pc, #460]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	4013      	ands	r3, r2
 80016fe:	d116      	bne.n	800172e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001700:	4b70      	ldr	r3, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x17e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e24b      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001716:	4b6b      	ldr	r3, [pc, #428]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	22f8      	movs	r2, #248	@ 0xf8
 800171c:	4393      	bics	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	00da      	lsls	r2, r3, #3
 8001726:	4b67      	ldr	r3, [pc, #412]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172c:	e041      	b.n	80017b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d024      	beq.n	8001780 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001736:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b62      	ldr	r3, [pc, #392]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800173c:	2101      	movs	r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fc09 	bl	8000f58 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fc04 	bl	8000f58 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e227      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d0f1      	beq.n	800174c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b56      	ldr	r3, [pc, #344]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	22f8      	movs	r2, #248	@ 0xf8
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00da      	lsls	r2, r3, #3
 8001778:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e018      	b.n	80017b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001780:	4b50      	ldr	r3, [pc, #320]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b4f      	ldr	r3, [pc, #316]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fbe4 	bl	8000f58 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fbdf 	bl	8000f58 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e202      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a8:	4b46      	ldr	r3, [pc, #280]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1f1      	bne.n	8001796 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2208      	movs	r2, #8
 80017b8:	4013      	ands	r3, r2
 80017ba:	d036      	beq.n	800182a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d019      	beq.n	80017f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c4:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017c8:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fbc2 	bl	8000f58 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fbbd 	bl	8000f58 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1e0      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ec:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f1      	beq.n	80017da <HAL_RCC_OscConfig+0x242>
 80017f6:	e018      	b.n	800182a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017fc:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fba8 	bl	8000f58 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fba3 	bl	8000f58 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1c6      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d1f1      	bne.n	800180e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2204      	movs	r2, #4
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <HAL_RCC_OscConfig+0x29e>
 8001834:	e0b4      	b.n	80019a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001836:	201f      	movs	r0, #31
 8001838:	183b      	adds	r3, r7, r0
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	055b      	lsls	r3, r3, #21
 8001846:	4013      	ands	r3, r2
 8001848:	d110      	bne.n	800186c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001850:	2180      	movs	r1, #128	@ 0x80
 8001852:	0549      	lsls	r1, r1, #21
 8001854:	430a      	orrs	r2, r1
 8001856:	61da      	str	r2, [r3, #28]
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800185a:	69da      	ldr	r2, [r3, #28]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	055b      	lsls	r3, r3, #21
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001866:	183b      	adds	r3, r7, r0
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_RCC_OscConfig+0x338>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4013      	ands	r3, r2
 8001876:	d11a      	bne.n	80018ae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_RCC_OscConfig+0x338>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_RCC_OscConfig+0x338>)
 800187e:	2180      	movs	r1, #128	@ 0x80
 8001880:	0049      	lsls	r1, r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fb67 	bl	8000f58 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7ff fb62 	bl	8000f58 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e185      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_OscConfig+0x338>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10e      	bne.n	80018d4 <HAL_RCC_OscConfig+0x33c>
 80018b6:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4b02      	ldr	r3, [pc, #8]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	e035      	b.n	8001930 <HAL_RCC_OscConfig+0x398>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	fffeffff 	.word	0xfffeffff
 80018cc:	fffbffff 	.word	0xfffbffff
 80018d0:	40007000 	.word	0x40007000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x35e>
 80018dc:	4bb6      	ldr	r3, [pc, #728]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4bb5      	ldr	r3, [pc, #724]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]
 80018e8:	4bb3      	ldr	r3, [pc, #716]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	4bb2      	ldr	r3, [pc, #712]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	438a      	bics	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x398>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x380>
 80018fe:	4bae      	ldr	r3, [pc, #696]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	4bad      	ldr	r3, [pc, #692]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001904:	2104      	movs	r1, #4
 8001906:	430a      	orrs	r2, r1
 8001908:	621a      	str	r2, [r3, #32]
 800190a:	4bab      	ldr	r3, [pc, #684]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	4baa      	ldr	r3, [pc, #680]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	621a      	str	r2, [r3, #32]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x398>
 8001918:	4ba7      	ldr	r3, [pc, #668]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	4ba6      	ldr	r3, [pc, #664]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	621a      	str	r2, [r3, #32]
 8001924:	4ba4      	ldr	r3, [pc, #656]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	4ba3      	ldr	r3, [pc, #652]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 800192a:	2104      	movs	r1, #4
 800192c:	438a      	bics	r2, r1
 800192e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d014      	beq.n	8001962 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb0e 	bl	8000f58 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fb09 	bl	8000f58 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a9b      	ldr	r2, [pc, #620]	@ (8001bbc <HAL_RCC_OscConfig+0x624>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e12b      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	4b98      	ldr	r3, [pc, #608]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x3aa>
 8001960:	e013      	b.n	800198a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff faf9 	bl	8000f58 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	e009      	b.n	8001980 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196c:	f7ff faf4 	bl	8000f58 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a91      	ldr	r2, [pc, #580]	@ (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e116      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	4b8d      	ldr	r3, [pc, #564]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800198a:	231f      	movs	r3, #31
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	4b87      	ldr	r3, [pc, #540]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 800199a:	4989      	ldr	r1, [pc, #548]	@ (8001bc0 <HAL_RCC_OscConfig+0x628>)
 800199c:	400a      	ands	r2, r1
 800199e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2210      	movs	r2, #16
 80019a6:	4013      	ands	r3, r2
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d12a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019b2:	4b81      	ldr	r3, [pc, #516]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b6:	4b80      	ldr	r3, [pc, #512]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80019b8:	2104      	movs	r1, #4
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019be:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fac5 	bl	8000f58 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019d4:	f7ff fac0 	bl	8000f58 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0e3      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019e6:	4b74      	ldr	r3, [pc, #464]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f1      	beq.n	80019d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f0:	4b71      	ldr	r3, [pc, #452]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f4:	22f8      	movs	r2, #248	@ 0xf8
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	00da      	lsls	r2, r3, #3
 8001a00:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a06:	e034      	b.n	8001a72 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	3305      	adds	r3, #5
 8001a0e:	d111      	bne.n	8001a34 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a10:	4b69      	ldr	r3, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a14:	4b68      	ldr	r3, [pc, #416]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	438a      	bics	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	22f8      	movs	r2, #248	@ 0xf8
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	00da      	lsls	r2, r3, #3
 8001a2c:	4b62      	ldr	r3, [pc, #392]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a32:	e01e      	b.n	8001a72 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a34:	4b60      	ldr	r3, [pc, #384]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a38:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a40:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a44:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa84 	bl	8000f58 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a56:	f7ff fa7f 	bl	8000f58 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0a2      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f1      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4e4>
 8001a7a:	e097      	b.n	8001bac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	220c      	movs	r2, #12
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4f2>
 8001a88:	e06b      	b.n	8001b62 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d14c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b49      	ldr	r3, [pc, #292]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b48      	ldr	r3, [pc, #288]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001a98:	494a      	ldr	r1, [pc, #296]	@ (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa5b 	bl	8000f58 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa56 	bl	8000f58 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e079      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	220f      	movs	r2, #15
 8001acc:	4393      	bics	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad4:	4b38      	ldr	r3, [pc, #224]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ada:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc8 <HAL_RCC_OscConfig+0x630>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	431a      	orrs	r2, r3
 8001aee:	4b32      	ldr	r3, [pc, #200]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001afa:	2180      	movs	r1, #128	@ 0x80
 8001afc:	0449      	lsls	r1, r1, #17
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fa29 	bl	8000f58 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fa24 	bl	8000f58 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e047      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	049b      	lsls	r3, r3, #18
 8001b26:	4013      	ands	r3, r2
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x574>
 8001b2a:	e03f      	b.n	8001bac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001b32:	4924      	ldr	r1, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fa0e 	bl	8000f58 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fa09 	bl	8000f58 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e02c      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	049b      	lsls	r3, r3, #18
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5aa>
 8001b60:	e024      	b.n	8001bac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01f      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x620>)
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	401a      	ands	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d10e      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	23f0      	movs	r3, #240	@ 0xf0
 8001b9c:	039b      	lsls	r3, r3, #14
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b008      	add	sp, #32
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	00001388 	.word	0x00001388
 8001bc0:	efffffff 	.word	0xefffffff
 8001bc4:	feffffff 	.word	0xfeffffff
 8001bc8:	ffc2ffff 	.word	0xffc2ffff

08001bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b3      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d911      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4b55      	ldr	r3, [pc, #340]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d015      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2204      	movs	r2, #4
 8001c22:	4013      	ands	r3, r2
 8001c24:	d006      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c26:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c2c:	21e0      	movs	r1, #224	@ 0xe0
 8001c2e:	00c9      	lsls	r1, r1, #3
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	22f0      	movs	r2, #240	@ 0xf0
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b44      	ldr	r3, [pc, #272]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d040      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4013      	ands	r3, r2
 8001c64:	d114      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	049b      	lsls	r3, r3, #18
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e062      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e05b      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c90:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f958 	bl	8000f58 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7ff f953 	bl	8000f58 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a27      	ldr	r2, [pc, #156]	@ (8001d58 <HAL_RCC_ClockConfig+0x18c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e042      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	401a      	ands	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1ec      	bne.n	8001cae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d211      	bcs.n	8001d06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4393      	bics	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e020      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_RCC_ClockConfig+0x190>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d24:	f000 f820 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d28:	0001      	movs	r1, r0
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	220f      	movs	r2, #15
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_RCC_ClockConfig+0x194>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	000a      	movs	r2, r1
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_RCC_ClockConfig+0x198>)
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f7ff f8c3 	bl	8000ecc <HAL_InitTick>
  
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	00001388 	.word	0x00001388
 8001d5c:	fffff8ff 	.word	0xfffff8ff
 8001d60:	08003248 	.word	0x08003248
 8001d64:	20000000 	.word	0x20000000

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x36>
 8001d96:	e02c      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d9a:	613b      	str	r3, [r7, #16]
      break;
 8001d9c:	e02c      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	220f      	movs	r2, #15
 8001da4:	4013      	ands	r3, r2
 8001da6:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	220f      	movs	r2, #15
 8001db2:	4013      	ands	r3, r2
 8001db4:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	4810      	ldr	r0, [pc, #64]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc8:	f7fe f99e 	bl	8000108 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4353      	muls	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	000a      	movs	r2, r1
 8001ddc:	0152      	lsls	r2, r2, #5
 8001dde:	1a52      	subs	r2, r2, r1
 8001de0:	0193      	lsls	r3, r2, #6
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	185b      	adds	r3, r3, r1
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
      break;
 8001df0:	e002      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001df4:	613b      	str	r3, [r7, #16]
      break;
 8001df6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	007a1200 	.word	0x007a1200
 8001e0c:	08003260 	.word	0x08003260
 8001e10:	08003270 	.word	0x08003270

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b02      	ldr	r3, [pc, #8]	@ (8001e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e2c:	f7ff fff2 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e30:	0001      	movs	r1, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	40d9      	lsrs	r1, r3
 8001e42:	000b      	movs	r3, r1
}    
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08003258 	.word	0x08003258

08001e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	025b      	lsls	r3, r3, #9
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d100      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e70:	e08e      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2017      	movs	r0, #23
 8001e74:	183b      	adds	r3, r7, r0
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	055b      	lsls	r3, r3, #21
 8001e82:	4013      	ands	r3, r2
 8001e84:	d110      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e8c:	2180      	movs	r1, #128	@ 0x80
 8001e8e:	0549      	lsls	r1, r1, #21
 8001e90:	430a      	orrs	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]
 8001e94:	4b58      	ldr	r3, [pc, #352]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	055b      	lsls	r3, r3, #21
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b54      	ldr	r3, [pc, #336]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d11a      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb4:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b50      	ldr	r3, [pc, #320]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	0049      	lsls	r1, r1, #1
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff f849 	bl	8000f58 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	e008      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7ff f844 	bl	8000f58 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e087      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	23c0      	movs	r3, #192	@ 0xc0
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d034      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	23c0      	movs	r3, #192	@ 0xc0
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d02c      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0249      	lsls	r1, r1, #9
 8001f20:	430a      	orrs	r2, r1
 8001f22:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f24:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f2a:	4936      	ldr	r1, [pc, #216]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f30:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f80b 	bl	8000f58 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f46:	e009      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7ff f806 	bl	8000f58 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4a2d      	ldr	r2, [pc, #180]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e048      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f66:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a25      	ldr	r2, [pc, #148]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f7a:	2317      	movs	r3, #23
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f8a:	4920      	ldr	r1, [pc, #128]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fd8:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	2240      	movs	r2, #64	@ 0x40
 8001fde:	4393      	bics	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	fffffcff 	.word	0xfffffcff
 8002004:	fffeffff 	.word	0xfffeffff
 8002008:	00001388 	.word	0x00001388
 800200c:	efffffff 	.word	0xefffffff

08002010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e044      	b.n	80020ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d107      	bne.n	800203a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2278      	movs	r2, #120	@ 0x78
 800202e:	2100      	movs	r1, #0
 8002030:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f7fe fe47 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2224      	movs	r2, #36	@ 0x24
 800203e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	438a      	bics	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 fe38 	bl	8002cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 fcf4 	bl	8002a50 <UART_SetConfig>
 8002068:	0003      	movs	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01c      	b.n	80020ac <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	490d      	ldr	r1, [pc, #52]	@ (80020b4 <HAL_UART_Init+0xa4>)
 800207e:	400a      	ands	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	212a      	movs	r1, #42	@ 0x2a
 800208e:	438a      	bics	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f000 fec7 	bl	8002e38 <UART_CheckIdleState>
 80020aa:	0003      	movs	r3, r0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	ffffb7ff 	.word	0xffffb7ff

080020b8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e04c      	b.n	8002164 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2278      	movs	r2, #120	@ 0x78
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe fdf3 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2224      	movs	r2, #36	@ 0x24
 80020e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 fde4 	bl	8002cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 fca0 	bl	8002a50 <UART_SetConfig>
 8002110:	0003      	movs	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_HalfDuplex_Init+0x62>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e024      	b.n	8002164 <HAL_HalfDuplex_Init+0xac>

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported) and IREN (if IrDA is supported) bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4911      	ldr	r1, [pc, #68]	@ (800216c <HAL_HalfDuplex_Init+0xb4>)
 8002126:	400a      	ands	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2122      	movs	r1, #34	@ 0x22
 8002136:	438a      	bics	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2108      	movs	r1, #8
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 fe6b 	bl	8002e38 <UART_CheckIdleState>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	ffffb7ff 	.word	0xffffb7ff

08002170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002184:	2b20      	cmp	r3, #32
 8002186:	d000      	beq.n	800218a <HAL_UART_Transmit+0x1a>
 8002188:	e08c      	b.n	80022a4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_UART_Transmit+0x28>
 8002190:	1dbb      	adds	r3, r7, #6
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e084      	b.n	80022a6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	015b      	lsls	r3, r3, #5
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d109      	bne.n	80021bc <HAL_UART_Transmit+0x4c>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	d001      	beq.n	80021bc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e074      	b.n	80022a6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2284      	movs	r2, #132	@ 0x84
 80021c0:	2100      	movs	r1, #0
 80021c2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2221      	movs	r2, #33	@ 0x21
 80021c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ca:	f7fe fec5 	bl	8000f58 <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1dba      	adds	r2, r7, #6
 80021d6:	2150      	movs	r1, #80	@ 0x50
 80021d8:	8812      	ldrh	r2, [r2, #0]
 80021da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1dba      	adds	r2, r7, #6
 80021e0:	2152      	movs	r1, #82	@ 0x52
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d108      	bne.n	8002204 <HAL_UART_Transmit+0x94>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e003      	b.n	800220c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800220c:	e02f      	b.n	800226e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	0013      	movs	r3, r2
 8002218:	2200      	movs	r2, #0
 800221a:	2180      	movs	r1, #128	@ 0x80
 800221c:	f000 feb4 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 8002220:	1e03      	subs	r3, r0, #0
 8002222:	d004      	beq.n	800222e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e03b      	b.n	80022a6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	05d2      	lsls	r2, r2, #23
 800223e:	0dd2      	lsrs	r2, r2, #23
 8002240:	b292      	uxth	r2, r2
 8002242:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	3302      	adds	r3, #2
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	e007      	b.n	800225c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2252      	movs	r2, #82	@ 0x52
 8002260:	5a9b      	ldrh	r3, [r3, r2]
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b299      	uxth	r1, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2252      	movs	r2, #82	@ 0x52
 800226c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2252      	movs	r2, #82	@ 0x52
 8002272:	5a9b      	ldrh	r3, [r3, r2]
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1c9      	bne.n	800220e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	0013      	movs	r3, r2
 8002284:	2200      	movs	r2, #0
 8002286:	2140      	movs	r1, #64	@ 0x40
 8002288:	f000 fe7e 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d004      	beq.n	800229a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e005      	b.n	80022a6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b008      	add	sp, #32
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2280      	movs	r2, #128	@ 0x80
 80022c4:	589b      	ldr	r3, [r3, r2]
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d000      	beq.n	80022cc <HAL_UART_Receive+0x1c>
 80022ca:	e0bd      	b.n	8002448 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_UART_Receive+0x2a>
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0b5      	b.n	800244a <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d109      	bne.n	80022fe <HAL_UART_Receive+0x4e>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d001      	beq.n	80022fe <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0a5      	b.n	800244a <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2284      	movs	r2, #132	@ 0x84
 8002302:	2100      	movs	r1, #0
 8002304:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2280      	movs	r2, #128	@ 0x80
 800230a:	2122      	movs	r1, #34	@ 0x22
 800230c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002314:	f7fe fe20 	bl	8000f58 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1dba      	adds	r2, r7, #6
 8002320:	2158      	movs	r1, #88	@ 0x58
 8002322:	8812      	ldrh	r2, [r2, #0]
 8002324:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1dba      	adds	r2, r7, #6
 800232a:	215a      	movs	r1, #90	@ 0x5a
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	015b      	lsls	r3, r3, #5
 8002338:	429a      	cmp	r2, r3
 800233a:	d10d      	bne.n	8002358 <HAL_UART_Receive+0xa8>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d104      	bne.n	800234e <HAL_UART_Receive+0x9e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	225c      	movs	r2, #92	@ 0x5c
 8002348:	4942      	ldr	r1, [pc, #264]	@ (8002454 <HAL_UART_Receive+0x1a4>)
 800234a:	5299      	strh	r1, [r3, r2]
 800234c:	e01a      	b.n	8002384 <HAL_UART_Receive+0xd4>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	225c      	movs	r2, #92	@ 0x5c
 8002352:	21ff      	movs	r1, #255	@ 0xff
 8002354:	5299      	strh	r1, [r3, r2]
 8002356:	e015      	b.n	8002384 <HAL_UART_Receive+0xd4>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_UART_Receive+0xcc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_UART_Receive+0xc2>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	225c      	movs	r2, #92	@ 0x5c
 800236c:	21ff      	movs	r1, #255	@ 0xff
 800236e:	5299      	strh	r1, [r3, r2]
 8002370:	e008      	b.n	8002384 <HAL_UART_Receive+0xd4>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	225c      	movs	r2, #92	@ 0x5c
 8002376:	217f      	movs	r1, #127	@ 0x7f
 8002378:	5299      	strh	r1, [r3, r2]
 800237a:	e003      	b.n	8002384 <HAL_UART_Receive+0xd4>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	225c      	movs	r2, #92	@ 0x5c
 8002380:	2100      	movs	r1, #0
 8002382:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002384:	2312      	movs	r3, #18
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	215c      	movs	r1, #92	@ 0x5c
 800238c:	5a52      	ldrh	r2, [r2, r1]
 800238e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	429a      	cmp	r2, r3
 800239a:	d108      	bne.n	80023ae <HAL_UART_Receive+0xfe>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e003      	b.n	80023b6 <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023b6:	e03b      	b.n	8002430 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0013      	movs	r3, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	2120      	movs	r1, #32
 80023c6:	f000 fddf 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2280      	movs	r2, #128	@ 0x80
 80023d2:	2120      	movs	r1, #32
 80023d4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e037      	b.n	800244a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10e      	bne.n	80023fe <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2212      	movs	r2, #18
 80023ea:	18ba      	adds	r2, r7, r2
 80023ec:	8812      	ldrh	r2, [r2, #0]
 80023ee:	4013      	ands	r3, r2
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3302      	adds	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e00f      	b.n	800241e <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2212      	movs	r2, #18
 800240a:	18ba      	adds	r2, r7, r2
 800240c:	8812      	ldrh	r2, [r2, #0]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4013      	ands	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3301      	adds	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	225a      	movs	r2, #90	@ 0x5a
 8002422:	5a9b      	ldrh	r3, [r3, r2]
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b299      	uxth	r1, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	225a      	movs	r2, #90	@ 0x5a
 800242e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	225a      	movs	r2, #90	@ 0x5a
 8002434:	5a9b      	ldrh	r3, [r3, r2]
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1bd      	bne.n	80023b8 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2280      	movs	r2, #128	@ 0x80
 8002440:	2120      	movs	r1, #32
 8002442:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b008      	add	sp, #32
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	000001ff 	.word	0x000001ff

08002458 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b0ab      	sub	sp, #172	@ 0xac
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	22a4      	movs	r2, #164	@ 0xa4
 8002468:	18b9      	adds	r1, r7, r2
 800246a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	20a0      	movs	r0, #160	@ 0xa0
 8002474:	1839      	adds	r1, r7, r0
 8002476:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	219c      	movs	r1, #156	@ 0x9c
 8002480:	1879      	adds	r1, r7, r1
 8002482:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002484:	0011      	movs	r1, r2
 8002486:	18bb      	adds	r3, r7, r2
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a99      	ldr	r2, [pc, #612]	@ (80026f0 <HAL_UART_IRQHandler+0x298>)
 800248c:	4013      	ands	r3, r2
 800248e:	2298      	movs	r2, #152	@ 0x98
 8002490:	18bc      	adds	r4, r7, r2
 8002492:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002494:	18bb      	adds	r3, r7, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d114      	bne.n	80024c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800249c:	187b      	adds	r3, r7, r1
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2220      	movs	r2, #32
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00f      	beq.n	80024c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024a6:	183b      	adds	r3, r7, r0
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00a      	beq.n	80024c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <HAL_UART_IRQHandler+0x62>
 80024b8:	e29e      	b.n	80029f8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	0010      	movs	r0, r2
 80024c2:	4798      	blx	r3
      }
      return;
 80024c4:	e298      	b.n	80029f8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024c6:	2398      	movs	r3, #152	@ 0x98
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d100      	bne.n	80024d2 <HAL_UART_IRQHandler+0x7a>
 80024d0:	e114      	b.n	80026fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024d2:	239c      	movs	r3, #156	@ 0x9c
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d106      	bne.n	80024ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024de:	23a0      	movs	r3, #160	@ 0xa0
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a83      	ldr	r2, [pc, #524]	@ (80026f4 <HAL_UART_IRQHandler+0x29c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_UART_IRQHandler+0x94>
 80024ea:	e107      	b.n	80026fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024ec:	23a4      	movs	r3, #164	@ 0xa4
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_UART_IRQHandler+0xc6>
 80024f8:	23a0      	movs	r3, #160	@ 0xa0
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2284      	movs	r2, #132	@ 0x84
 8002512:	589b      	ldr	r3, [r3, r2]
 8002514:	2201      	movs	r2, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2184      	movs	r1, #132	@ 0x84
 800251c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800251e:	23a4      	movs	r3, #164	@ 0xa4
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d011      	beq.n	800254e <HAL_UART_IRQHandler+0xf6>
 800252a:	239c      	movs	r3, #156	@ 0x9c
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	d00b      	beq.n	800254e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2202      	movs	r2, #2
 800253c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2284      	movs	r2, #132	@ 0x84
 8002542:	589b      	ldr	r3, [r3, r2]
 8002544:	2204      	movs	r2, #4
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2184      	movs	r1, #132	@ 0x84
 800254c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800254e:	23a4      	movs	r3, #164	@ 0xa4
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d011      	beq.n	800257e <HAL_UART_IRQHandler+0x126>
 800255a:	239c      	movs	r3, #156	@ 0x9c
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2204      	movs	r2, #4
 800256c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2284      	movs	r2, #132	@ 0x84
 8002572:	589b      	ldr	r3, [r3, r2]
 8002574:	2202      	movs	r2, #2
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2184      	movs	r1, #132	@ 0x84
 800257c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800257e:	23a4      	movs	r3, #164	@ 0xa4
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d017      	beq.n	80025ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800258a:	23a0      	movs	r3, #160	@ 0xa0
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2220      	movs	r2, #32
 8002592:	4013      	ands	r3, r2
 8002594:	d105      	bne.n	80025a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002596:	239c      	movs	r3, #156	@ 0x9c
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2208      	movs	r2, #8
 80025a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2284      	movs	r2, #132	@ 0x84
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	2208      	movs	r2, #8
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2184      	movs	r1, #132	@ 0x84
 80025b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025ba:	23a4      	movs	r3, #164	@ 0xa4
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4013      	ands	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_UART_IRQHandler+0x198>
 80025c8:	23a0      	movs	r3, #160	@ 0xa0
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	04db      	lsls	r3, r3, #19
 80025d2:	4013      	ands	r3, r2
 80025d4:	d00c      	beq.n	80025f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2284      	movs	r2, #132	@ 0x84
 80025e4:	589b      	ldr	r3, [r3, r2]
 80025e6:	2220      	movs	r2, #32
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2184      	movs	r1, #132	@ 0x84
 80025ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2284      	movs	r2, #132	@ 0x84
 80025f4:	589b      	ldr	r3, [r3, r2]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d100      	bne.n	80025fc <HAL_UART_IRQHandler+0x1a4>
 80025fa:	e1ff      	b.n	80029fc <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025fc:	23a4      	movs	r3, #164	@ 0xa4
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2220      	movs	r2, #32
 8002604:	4013      	ands	r3, r2
 8002606:	d00e      	beq.n	8002626 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002608:	23a0      	movs	r3, #160	@ 0xa0
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d008      	beq.n	8002626 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	0010      	movs	r0, r2
 8002624:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2284      	movs	r2, #132	@ 0x84
 800262a:	589b      	ldr	r3, [r3, r2]
 800262c:	2194      	movs	r1, #148	@ 0x94
 800262e:	187a      	adds	r2, r7, r1
 8002630:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2240      	movs	r2, #64	@ 0x40
 800263a:	4013      	ands	r3, r2
 800263c:	2b40      	cmp	r3, #64	@ 0x40
 800263e:	d004      	beq.n	800264a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002640:	187b      	adds	r3, r7, r1
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2228      	movs	r2, #40	@ 0x28
 8002646:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002648:	d047      	beq.n	80026da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fd0b 	bl	8003068 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2240      	movs	r2, #64	@ 0x40
 800265a:	4013      	ands	r3, r2
 800265c:	2b40      	cmp	r3, #64	@ 0x40
 800265e:	d137      	bne.n	80026d0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002660:	f3ef 8310 	mrs	r3, PRIMASK
 8002664:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002668:	2090      	movs	r0, #144	@ 0x90
 800266a:	183a      	adds	r2, r7, r0
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002674:	f383 8810 	msr	PRIMASK, r3
}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2140      	movs	r1, #64	@ 0x40
 8002686:	438a      	bics	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	183b      	adds	r3, r7, r0
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <HAL_UART_IRQHandler+0x2a0>)
 80026a6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe fd97 	bl	80011e0 <HAL_DMA_Abort_IT>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d01a      	beq.n	80026ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	0018      	movs	r0, r3
 80026c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e012      	b.n	80026ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f9ad 	bl	8002a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ce:	e00d      	b.n	80026ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f9a8 	bl	8002a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e008      	b.n	80026ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 f9a3 	bl	8002a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2284      	movs	r2, #132	@ 0x84
 80026e6:	2100      	movs	r1, #0
 80026e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026ea:	e187      	b.n	80029fc <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	46c0      	nop			@ (mov r8, r8)
    return;
 80026ee:	e185      	b.n	80029fc <HAL_UART_IRQHandler+0x5a4>
 80026f0:	0000080f 	.word	0x0000080f
 80026f4:	04000120 	.word	0x04000120
 80026f8:	08003131 	.word	0x08003131

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002700:	2b01      	cmp	r3, #1
 8002702:	d000      	beq.n	8002706 <HAL_UART_IRQHandler+0x2ae>
 8002704:	e139      	b.n	800297a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002706:	23a4      	movs	r3, #164	@ 0xa4
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2210      	movs	r2, #16
 800270e:	4013      	ands	r3, r2
 8002710:	d100      	bne.n	8002714 <HAL_UART_IRQHandler+0x2bc>
 8002712:	e132      	b.n	800297a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002714:	23a0      	movs	r3, #160	@ 0xa0
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2210      	movs	r2, #16
 800271c:	4013      	ands	r3, r2
 800271e:	d100      	bne.n	8002722 <HAL_UART_IRQHandler+0x2ca>
 8002720:	e12b      	b.n	800297a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2210      	movs	r2, #16
 8002728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2240      	movs	r2, #64	@ 0x40
 8002732:	4013      	ands	r3, r2
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d000      	beq.n	800273a <HAL_UART_IRQHandler+0x2e2>
 8002738:	e09f      	b.n	800287a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	217e      	movs	r1, #126	@ 0x7e
 8002744:	187b      	adds	r3, r7, r1
 8002746:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002748:	187b      	adds	r3, r7, r1
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d100      	bne.n	8002752 <HAL_UART_IRQHandler+0x2fa>
 8002750:	e156      	b.n	8002a00 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2258      	movs	r2, #88	@ 0x58
 8002756:	5a9b      	ldrh	r3, [r3, r2]
 8002758:	187a      	adds	r2, r7, r1
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d300      	bcc.n	8002762 <HAL_UART_IRQHandler+0x30a>
 8002760:	e14e      	b.n	8002a00 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	187a      	adds	r2, r7, r1
 8002766:	215a      	movs	r1, #90	@ 0x5a
 8002768:	8812      	ldrh	r2, [r2, #0]
 800276a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b20      	cmp	r3, #32
 8002774:	d06f      	beq.n	8002856 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002776:	f3ef 8310 	mrs	r3, PRIMASK
 800277a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002780:	2301      	movs	r3, #1
 8002782:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002786:	f383 8810 	msr	PRIMASK, r3
}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	499e      	ldr	r1, [pc, #632]	@ (8002a10 <HAL_UART_IRQHandler+0x5b8>)
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800279e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a2:	f383 8810 	msr	PRIMASK, r3
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a8:	f3ef 8310 	mrs	r3, PRIMASK
 80027ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80027ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80027b2:	2301      	movs	r3, #1
 80027b4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b8:	f383 8810 	msr	PRIMASK, r3
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	438a      	bics	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d4:	f383 8810 	msr	PRIMASK, r3
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027da:	f3ef 8310 	mrs	r3, PRIMASK
 80027de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80027e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80027e4:	2301      	movs	r3, #1
 80027e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2140      	movs	r1, #64	@ 0x40
 80027fc:	438a      	bics	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002802:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002806:	f383 8810 	msr	PRIMASK, r3
}
 800280a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	2120      	movs	r1, #32
 8002812:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800281a:	f3ef 8310 	mrs	r3, PRIMASK
 800281e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002822:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002824:	2301      	movs	r3, #1
 8002826:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002828:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800282a:	f383 8810 	msr	PRIMASK, r3
}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2110      	movs	r1, #16
 800283c:	438a      	bics	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002842:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002846:	f383 8810 	msr	PRIMASK, r3
}
 800284a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe fc8d 	bl	8001170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2258      	movs	r2, #88	@ 0x58
 8002860:	5a9a      	ldrh	r2, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	215a      	movs	r1, #90	@ 0x5a
 8002866:	5a5b      	ldrh	r3, [r3, r1]
 8002868:	b29b      	uxth	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f8e0 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002878:	e0c2      	b.n	8002a00 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2258      	movs	r2, #88	@ 0x58
 800287e:	5a99      	ldrh	r1, [r3, r2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	225a      	movs	r2, #90	@ 0x5a
 8002884:	5a9b      	ldrh	r3, [r3, r2]
 8002886:	b29a      	uxth	r2, r3
 8002888:	208e      	movs	r0, #142	@ 0x8e
 800288a:	183b      	adds	r3, r7, r0
 800288c:	1a8a      	subs	r2, r1, r2
 800288e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	225a      	movs	r2, #90	@ 0x5a
 8002894:	5a9b      	ldrh	r3, [r3, r2]
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d100      	bne.n	800289e <HAL_UART_IRQHandler+0x446>
 800289c:	e0b2      	b.n	8002a04 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <HAL_UART_IRQHandler+0x450>
 80028a6:	e0ad      	b.n	8002a04 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b0:	2488      	movs	r4, #136	@ 0x88
 80028b2:	193a      	adds	r2, r7, r4
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4951      	ldr	r1, [pc, #324]	@ (8002a14 <HAL_UART_IRQHandler+0x5bc>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f383 8810 	msr	PRIMASK, r3
}
 80028de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e0:	f3ef 8310 	mrs	r3, PRIMASK
 80028e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80028e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	2484      	movs	r4, #132	@ 0x84
 80028ea:	193a      	adds	r2, r7, r4
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f383 8810 	msr	PRIMASK, r3
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	438a      	bics	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	193b      	adds	r3, r7, r4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	@ 0x80
 800291c:	2120      	movs	r1, #32
 800291e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292c:	f3ef 8310 	mrs	r3, PRIMASK
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002934:	2480      	movs	r4, #128	@ 0x80
 8002936:	193a      	adds	r2, r7, r4
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	2301      	movs	r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2110      	movs	r1, #16
 8002952:	438a      	bics	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	193b      	adds	r3, r7, r4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295e:	f383 8810 	msr	PRIMASK, r3
}
 8002962:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800296a:	183b      	adds	r3, r7, r0
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f860 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002978:	e044      	b.n	8002a04 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800297a:	23a4      	movs	r3, #164	@ 0xa4
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	035b      	lsls	r3, r3, #13
 8002984:	4013      	ands	r3, r2
 8002986:	d010      	beq.n	80029aa <HAL_UART_IRQHandler+0x552>
 8002988:	239c      	movs	r3, #156	@ 0x9c
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	03db      	lsls	r3, r3, #15
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	0352      	lsls	r2, r2, #13
 800299e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 fc06 	bl	80031b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029a8:	e02f      	b.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029aa:	23a4      	movs	r3, #164	@ 0xa4
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2280      	movs	r2, #128	@ 0x80
 80029b2:	4013      	ands	r3, r2
 80029b4:	d00f      	beq.n	80029d6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029b6:	23a0      	movs	r3, #160	@ 0xa0
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	4013      	ands	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01e      	beq.n	8002a08 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	0010      	movs	r0, r2
 80029d2:	4798      	blx	r3
    }
    return;
 80029d4:	e018      	b.n	8002a08 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029d6:	23a4      	movs	r3, #164	@ 0xa4
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2240      	movs	r2, #64	@ 0x40
 80029de:	4013      	ands	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
 80029e2:	23a0      	movs	r3, #160	@ 0xa0
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 fbb4 	bl	800315e <UART_EndTransmit_IT>
    return;
 80029f6:	e008      	b.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
      return;
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	e006      	b.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
    return;
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	e004      	b.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	e002      	b.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	e000      	b.n	8002a0a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002a08:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b02b      	add	sp, #172	@ 0xac
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	fffffeff 	.word	0xfffffeff
 8002a14:	fffffedf 	.word	0xfffffedf

08002a18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	000a      	movs	r2, r1
 8002a42:	1cbb      	adds	r3, r7, #2
 8002a44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a58:	231e      	movs	r3, #30
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a8d      	ldr	r2, [pc, #564]	@ (8002cb4 <UART_SetConfig+0x264>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a88      	ldr	r2, [pc, #544]	@ (8002cb8 <UART_SetConfig+0x268>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a7f      	ldr	r2, [pc, #508]	@ (8002cbc <UART_SetConfig+0x26c>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a7b      	ldr	r2, [pc, #492]	@ (8002cc0 <UART_SetConfig+0x270>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d127      	bne.n	8002b26 <UART_SetConfig+0xd6>
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc4 <UART_SetConfig+0x274>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	2203      	movs	r2, #3
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d00d      	beq.n	8002afe <UART_SetConfig+0xae>
 8002ae2:	d81b      	bhi.n	8002b1c <UART_SetConfig+0xcc>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d014      	beq.n	8002b12 <UART_SetConfig+0xc2>
 8002ae8:	d818      	bhi.n	8002b1c <UART_SetConfig+0xcc>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <UART_SetConfig+0xa4>
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d00a      	beq.n	8002b08 <UART_SetConfig+0xb8>
 8002af2:	e013      	b.n	8002b1c <UART_SetConfig+0xcc>
 8002af4:	231f      	movs	r3, #31
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e021      	b.n	8002b42 <UART_SetConfig+0xf2>
 8002afe:	231f      	movs	r3, #31
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e01c      	b.n	8002b42 <UART_SetConfig+0xf2>
 8002b08:	231f      	movs	r3, #31
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e017      	b.n	8002b42 <UART_SetConfig+0xf2>
 8002b12:	231f      	movs	r3, #31
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2208      	movs	r2, #8
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e012      	b.n	8002b42 <UART_SetConfig+0xf2>
 8002b1c:	231f      	movs	r3, #31
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2210      	movs	r2, #16
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e00d      	b.n	8002b42 <UART_SetConfig+0xf2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a67      	ldr	r2, [pc, #412]	@ (8002cc8 <UART_SetConfig+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d104      	bne.n	8002b3a <UART_SetConfig+0xea>
 8002b30:	231f      	movs	r3, #31
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e003      	b.n	8002b42 <UART_SetConfig+0xf2>
 8002b3a:	231f      	movs	r3, #31
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2210      	movs	r2, #16
 8002b40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d15c      	bne.n	8002c08 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002b4e:	231f      	movs	r3, #31
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d015      	beq.n	8002b84 <UART_SetConfig+0x134>
 8002b58:	dc18      	bgt.n	8002b8c <UART_SetConfig+0x13c>
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00d      	beq.n	8002b7a <UART_SetConfig+0x12a>
 8002b5e:	dc15      	bgt.n	8002b8c <UART_SetConfig+0x13c>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <UART_SetConfig+0x11a>
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d005      	beq.n	8002b74 <UART_SetConfig+0x124>
 8002b68:	e010      	b.n	8002b8c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6a:	f7ff f95d 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	61bb      	str	r3, [r7, #24]
        break;
 8002b72:	e012      	b.n	8002b9a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b74:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <UART_SetConfig+0x27c>)
 8002b76:	61bb      	str	r3, [r7, #24]
        break;
 8002b78:	e00f      	b.n	8002b9a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7a:	f7ff f8f5 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61bb      	str	r3, [r7, #24]
        break;
 8002b82:	e00a      	b.n	8002b9a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	61bb      	str	r3, [r7, #24]
        break;
 8002b8a:	e006      	b.n	8002b9a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b90:	231e      	movs	r3, #30
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
        break;
 8002b98:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d100      	bne.n	8002ba2 <UART_SetConfig+0x152>
 8002ba0:	e07a      	b.n	8002c98 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	005a      	lsls	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	18d2      	adds	r2, r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f7fd faa7 	bl	8000108 <__udivsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d91c      	bls.n	8002bfe <UART_SetConfig+0x1ae>
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d217      	bcs.n	8002bfe <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	200e      	movs	r0, #14
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	438a      	bics	r2, r1
 8002bda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	b299      	uxth	r1, r3
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	183a      	adds	r2, r7, r0
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	183a      	adds	r2, r7, r0
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	e04c      	b.n	8002c98 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002bfe:	231e      	movs	r3, #30
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e047      	b.n	8002c98 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c08:	231f      	movs	r3, #31
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d015      	beq.n	8002c3e <UART_SetConfig+0x1ee>
 8002c12:	dc18      	bgt.n	8002c46 <UART_SetConfig+0x1f6>
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00d      	beq.n	8002c34 <UART_SetConfig+0x1e4>
 8002c18:	dc15      	bgt.n	8002c46 <UART_SetConfig+0x1f6>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <UART_SetConfig+0x1d4>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d005      	beq.n	8002c2e <UART_SetConfig+0x1de>
 8002c22:	e010      	b.n	8002c46 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff f900 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61bb      	str	r3, [r7, #24]
        break;
 8002c2c:	e012      	b.n	8002c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c2e:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <UART_SetConfig+0x27c>)
 8002c30:	61bb      	str	r3, [r7, #24]
        break;
 8002c32:	e00f      	b.n	8002c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c34:	f7ff f898 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	61bb      	str	r3, [r7, #24]
        break;
 8002c3c:	e00a      	b.n	8002c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	61bb      	str	r3, [r7, #24]
        break;
 8002c44:	e006      	b.n	8002c54 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c4a:	231e      	movs	r3, #30
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
        break;
 8002c52:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	085a      	lsrs	r2, r3, #1
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	18d2      	adds	r2, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0019      	movs	r1, r3
 8002c6a:	0010      	movs	r0, r2
 8002c6c:	f7fd fa4c 	bl	8000108 <__udivsi3>
 8002c70:	0003      	movs	r3, r0
 8002c72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	d90a      	bls.n	8002c90 <UART_SetConfig+0x240>
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	025b      	lsls	r3, r3, #9
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d205      	bcs.n	8002c90 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	e003      	b.n	8002c98 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002c90:	231e      	movs	r3, #30
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ca4:	231e      	movs	r3, #30
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b008      	add	sp, #32
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	ffff69f3 	.word	0xffff69f3
 8002cb8:	ffffcfff 	.word	0xffffcfff
 8002cbc:	fffff4ff 	.word	0xfffff4ff
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e14 <UART_AdvFeatureConfig+0x144>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a43      	ldr	r2, [pc, #268]	@ (8002e18 <UART_AdvFeatureConfig+0x148>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e1c <UART_AdvFeatureConfig+0x14c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a34      	ldr	r2, [pc, #208]	@ (8002e20 <UART_AdvFeatureConfig+0x150>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	2210      	movs	r2, #16
 8002d66:	4013      	ands	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	@ (8002e24 <UART_AdvFeatureConfig+0x154>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d00b      	beq.n	8002da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <UART_AdvFeatureConfig+0x158>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	2240      	movs	r2, #64	@ 0x40
 8002daa:	4013      	ands	r3, r2
 8002dac:	d01d      	beq.n	8002dea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <UART_AdvFeatureConfig+0x15c>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	035b      	lsls	r3, r3, #13
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10b      	bne.n	8002dea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <UART_AdvFeatureConfig+0x160>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	2280      	movs	r2, #128	@ 0x80
 8002df0:	4013      	ands	r3, r2
 8002df2:	d00b      	beq.n	8002e0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8002e34 <UART_AdvFeatureConfig+0x164>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffff7fff 	.word	0xffff7fff
 8002e18:	fffdffff 	.word	0xfffdffff
 8002e1c:	fffeffff 	.word	0xfffeffff
 8002e20:	fffbffff 	.word	0xfffbffff
 8002e24:	ffffefff 	.word	0xffffefff
 8002e28:	ffffdfff 	.word	0xffffdfff
 8002e2c:	ffefffff 	.word	0xffefffff
 8002e30:	ff9fffff 	.word	0xff9fffff
 8002e34:	fff7ffff 	.word	0xfff7ffff

08002e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b092      	sub	sp, #72	@ 0x48
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2284      	movs	r2, #132	@ 0x84
 8002e44:	2100      	movs	r1, #0
 8002e46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e48:	f7fe f886 	bl	8000f58 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2208      	movs	r2, #8
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d12c      	bne.n	8002eb8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e60:	2280      	movs	r2, #128	@ 0x80
 8002e62:	0391      	lsls	r1, r2, #14
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4a46      	ldr	r2, [pc, #280]	@ (8002f80 <UART_CheckIdleState+0x148>)
 8002e68:	9200      	str	r2, [sp, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f000 f88c 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d021      	beq.n	8002eb8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e74:	f3ef 8310 	mrs	r3, PRIMASK
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7e:	2301      	movs	r3, #1
 8002e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2180      	movs	r1, #128	@ 0x80
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2278      	movs	r2, #120	@ 0x78
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e05f      	b.n	8002f78 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d146      	bne.n	8002f54 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	03d1      	lsls	r1, r2, #15
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4a2c      	ldr	r2, [pc, #176]	@ (8002f80 <UART_CheckIdleState+0x148>)
 8002ed0:	9200      	str	r2, [sp, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f000 f858 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d03b      	beq.n	8002f54 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002edc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f383 8810 	msr	PRIMASK, r3
}
 8002ef0:	46c0      	nop			@ (mov r8, r8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4921      	ldr	r1, [pc, #132]	@ (8002f84 <UART_CheckIdleState+0x14c>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f14:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f383 8810 	msr	PRIMASK, r3
}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	438a      	bics	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2280      	movs	r2, #128	@ 0x80
 8002f44:	2120      	movs	r1, #32
 8002f46:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2278      	movs	r2, #120	@ 0x78
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e011      	b.n	8002f78 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2280      	movs	r2, #128	@ 0x80
 8002f5e:	2120      	movs	r1, #32
 8002f60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2278      	movs	r2, #120	@ 0x78
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b010      	add	sp, #64	@ 0x40
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	01ffffff 	.word	0x01ffffff
 8002f84:	fffffedf 	.word	0xfffffedf

08002f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f98:	e051      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	d04e      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	f7fd ffda 	bl	8000f58 <HAL_GetTick>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e051      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d03b      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b80      	cmp	r3, #128	@ 0x80
 8002fca:	d038      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b40      	cmp	r3, #64	@ 0x40
 8002fd0:	d035      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d111      	bne.n	8003004 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f83c 	bl	8003068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2284      	movs	r2, #132	@ 0x84
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2278      	movs	r2, #120	@ 0x78
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e02c      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	2380      	movs	r3, #128	@ 0x80
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	401a      	ands	r2, r3
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	429a      	cmp	r2, r3
 8003016:	d112      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 f81f 	bl	8003068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2284      	movs	r2, #132	@ 0x84
 800302e:	2120      	movs	r1, #32
 8003030:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2278      	movs	r2, #120	@ 0x78
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e00f      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	425a      	negs	r2, r3
 800304e:	4153      	adcs	r3, r2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	001a      	movs	r2, r3
 8003054:	1dfb      	adds	r3, r7, #7
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d09e      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08e      	sub	sp, #56	@ 0x38
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003070:	f3ef 8310 	mrs	r3, PRIMASK
 8003074:	617b      	str	r3, [r7, #20]
  return(result);
 8003076:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003078:	637b      	str	r3, [r7, #52]	@ 0x34
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f383 8810 	msr	PRIMASK, r3
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4926      	ldr	r1, [pc, #152]	@ (800312c <UART_EndRxTransfer+0xc4>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a2:	f3ef 8310 	mrs	r3, PRIMASK
 80030a6:	623b      	str	r3, [r7, #32]
  return(result);
 80030a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ac:	2301      	movs	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	438a      	bics	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d118      	bne.n	800310e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030dc:	f3ef 8310 	mrs	r3, PRIMASK
 80030e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e6:	2301      	movs	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f383 8810 	msr	PRIMASK, r3
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2110      	movs	r1, #16
 80030fe:	438a      	bics	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2280      	movs	r2, #128	@ 0x80
 8003112:	2120      	movs	r1, #32
 8003114:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b00e      	add	sp, #56	@ 0x38
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	fffffedf 	.word	0xfffffedf

08003130 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	225a      	movs	r2, #90	@ 0x5a
 8003142:	2100      	movs	r1, #0
 8003144:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2252      	movs	r2, #82	@ 0x52
 800314a:	2100      	movs	r1, #0
 800314c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff fc69 	bl	8002a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003166:	f3ef 8310 	mrs	r3, PRIMASK
 800316a:	60bb      	str	r3, [r7, #8]
  return(result);
 800316c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f383 8810 	msr	PRIMASK, r3
}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2140      	movs	r1, #64	@ 0x40
 8003188:	438a      	bics	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f383 8810 	msr	PRIMASK, r3
}
 8003196:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff fc36 	bl	8002a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b006      	add	sp, #24
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <memset>:
 80031c4:	0003      	movs	r3, r0
 80031c6:	1882      	adds	r2, r0, r2
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d100      	bne.n	80031ce <memset+0xa>
 80031cc:	4770      	bx	lr
 80031ce:	7019      	strb	r1, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	e7f9      	b.n	80031c8 <memset+0x4>

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4c0c      	ldr	r4, [pc, #48]	@ (800320c <__libc_init_array+0x38>)
 80031da:	4d0d      	ldr	r5, [pc, #52]	@ (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	2600      	movs	r6, #0
 80031e6:	f000 f823 	bl	8003230 <_init>
 80031ea:	4c0a      	ldr	r4, [pc, #40]	@ (8003214 <__libc_init_array+0x40>)
 80031ec:	4d0a      	ldr	r5, [pc, #40]	@ (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	00b3      	lsls	r3, r6, #2
 80031fa:	58eb      	ldr	r3, [r5, r3]
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	00b3      	lsls	r3, r6, #2
 8003204:	58eb      	ldr	r3, [r5, r3]
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003280 	.word	0x08003280
 8003210:	08003280 	.word	0x08003280
 8003214:	08003284 	.word	0x08003284
 8003218:	08003280 	.word	0x08003280

0800321c <memcpy>:
 800321c:	2300      	movs	r3, #0
 800321e:	b510      	push	{r4, lr}
 8003220:	429a      	cmp	r2, r3
 8003222:	d100      	bne.n	8003226 <memcpy+0xa>
 8003224:	bd10      	pop	{r4, pc}
 8003226:	5ccc      	ldrb	r4, [r1, r3]
 8003228:	54c4      	strb	r4, [r0, r3]
 800322a:	3301      	adds	r3, #1
 800322c:	e7f8      	b.n	8003220 <memcpy+0x4>
	...

08003230 <_init>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr

0800323c <_fini>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	469e      	mov	lr, r3
 8003246:	4770      	bx	lr
